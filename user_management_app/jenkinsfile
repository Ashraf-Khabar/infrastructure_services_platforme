pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        
        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'
        PYTHON_PACKAGE_VERSION = '1.0.0'
        
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"
        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt"
                    }
                }
                stage('Client Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt"
                    }
                }
                stage('Test Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install pytest requests"
                    }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install robotframework
                            ${VENV_PATH}/bin/pip install robotframework-requests
                            ${VENV_PATH}/bin/pip install robotframework-databaselibrary
                            ${VENV_PATH}/bin/pip install psycopg2-binary
                        """
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server :"
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > api.log 2>&1 &
                        echo \$! > ${API_PID_FILE}
                    """
                    
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -f http://localhost:5000/health > /dev/null 2>&1
                                """
                                echo "API is ready!"
                                return true
                            } catch (Exception e) {
                                sleep(2)
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short"
                    }
                }

                stage('Model Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short"
                    }
                }

                stage('Unit Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short"
                    }
                }

                stage('Robot Framework Tests') {
                    steps {
                        script {
                            // catchError empêche le blocage du pipeline
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh """
                                    mkdir -p ${ROBOT_REPORTS_DIR}
                                    echo "=== Recherche des tests Robot Framework ==="
                                    ls -la ${APP_DIR}/robot_tests/ || true
                                    
                                    cd ${APP_DIR}/robot_tests
                                    
                                    ${VENV_PATH}/bin/robot \
                                        --outputdir ${ROBOT_REPORTS_DIR} \
                                        --output output.xml \
                                        --report report.html \
                                        --log log.html \
                                        --xunit xunit.xml \
                                        .
                                    
                                    echo "=== Fichiers générés ==="
                                    ls -la ${ROBOT_REPORTS_DIR}/
                                """
                            }
                        }
                    }
                    
                    post {
                        always {
                            script {
                                def outputFile = "output.xml"
                                if (!fileExists("${ROBOT_REPORTS_DIR}/${outputFile}")) {
                                    outputFile = "xunit.xml"
                                }
                                if (!fileExists("${ROBOT_REPORTS_DIR}/${outputFile}")) {
                                    outputFile = "robotxunit.xml"
                                }
                                
                                if (fileExists("${ROBOT_REPORTS_DIR}/${outputFile}")) {
                                    echo "Utilisation du fichier de rapport: ${outputFile}"
                                    robot outputPath: "${ROBOT_REPORTS_DIR}", 
                                          outputFileName: outputFile,
                                          reportFileName: "report.html",
                                          logFileName: "log.html",
                                          disableArchiveOutput: false
                                } else {
                                    echo "⚠️ Aucun rapport Robot Framework trouvé"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server :"
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package :"

                    sh '${VENV_PATH}/bin/pip install setuptools wheel'
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype : "
                    
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} \
                                dist/*
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                BUILD_STATUS = currentBuild.currentResult
                
                sh """
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                """

                // Vérification et publication des résultats Robot Framework
                script {
                    def robotFiles = [
                        "${ROBOT_REPORTS_DIR}/output.xml",
                        "${ROBOT_REPORTS_DIR}/xunit.xml", 
                        "${ROBOT_REPORTS_DIR}/robotxunit.xml"
                    ]
                    
                    def robotReportFound = false
                    for (file in robotFiles) {
                        if (fileExists(file)) {
                            echo "Publication du rapport Robot Framework: ${file}"
                            robot outputPath: "${ROBOT_REPORTS_DIR}", 
                                  outputFileName: new File(file).getName(),
                                  reportFileName: "report.html",
                                  logFileName: "log.html",
                                  disableArchiveOutput: false
                            robotReportFound = true
                            break
                        }
                    }
                    
                    if (!robotReportFound) {
                        echo "⚠️ Aucun rapport Robot Framework trouvé pour publication"
                    }
                }

                def statusColor
                if (BUILD_STATUS == 'SUCCESS') {
                    statusColor = '#28a745' 
                } else if (BUILD_STATUS == 'UNSTABLE') {
                    statusColor = '#ffc107' 
                } else {
                    statusColor = '#dc3545' 
                }
                
                def emailTemplate = readFile(file: env.EMAIL_TEMPLATE_PATH)
                
                def emailBody = emailTemplate
                    .replace('${STATUS_COLOR}', statusColor)
                    .replace('${BUILD_STATUS}', BUILD_STATUS)
                    .replace('${JOB_NAME}', env.JOB_NAME)
                    .replace('${BUILD_NUMBER}', env.BUILD_NUMBER)
                    .replace('${BUILD_DURATION}', currentBuild.durationString)
                    .replace('${NEXUS_URL}', env.NEXUS_URL)
                    .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY)
                    .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION)
                    .replace('${BUILD_URL}', env.BUILD_URL)
                    .replace('${CURRENT_YEAR}', new Date().format("yyyy"))
                
                emailext (
                    subject: "Build ${BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
    }
}
