pipeline {
    agent any
    
    stages {
        stage('Analyse Environment') {
            steps {
                script {
                    echo "Analyse de l'environnement Jenkins..."
                    
                    sh '''
                        echo "=== ENVIRONNEMENT DISPONIBLE ==="
                        echo "User: $(whoami)"
                        echo "Home: $HOME"
                        echo "PWD: $(pwd)"
                        echo "PATH: $PATH"
                        echo ""
                        
                        echo "=== COMMANDES DISPONIBLES ==="
                        # Vérifier les commandes une par une
                        if command -v python >/dev/null 2>&1; then
                            echo "✓ python: $(which python)"
                        else
                            echo "✗ python: non disponible"
                        fi
                        
                        if command -v python3 >/dev/null 2>&1; then
                            echo "✓ python3: $(which python3)"
                        else
                            echo "✗ python3: non disponible"
                        fi
                        
                        if command -v pip >/dev/null 2>&1; then
                            echo "✓ pip: $(which pip)"
                        else
                            echo "✗ pip: non disponible"
                        fi
                        
                        if command -v pip3 >/dev/null 2>&1; then
                            echo "✓ pip3: $(which pip3)"
                        else
                            echo "✗ pip3: non disponible"
                        fi
                        
                        if command -v docker >/dev/null 2>&1; then
                            echo "✓ docker: $(which docker)"
                        else
                            echo "✗ docker: non disponible"
                        fi
                        
                        if command -v docker-compose >/dev/null 2>&1; then
                            echo "✓ docker-compose: $(which docker-compose)"
                        else
                            echo "✗ docker-compose: non disponible"
                        fi
                        
                        echo ""
                        echo "=== PERMISSIONS ==="
                        # Test d'écriture simple
                        touch test_write.txt 2>/dev/null && echo "✓ Écriture possible" || echo "✗ Écriture impossible"
                        rm -f test_write.txt 2>/dev/null || true
                        
                        echo ""
                        echo "=== STRUCTURE DU PROJET ==="
                        ls -la
                    '''
                }
            }
        }
        
        stage('Vérification Fichiers') {
            steps {
                sh '''
                    echo "=== VÉRIFICATION DES FICHIERS REQUIS ==="
                    
                    # Vérifier chaque fichier individuellement
                    error_count=0
                    
                    # Fichiers obligatoires
                    if [ -f "api/requirements.txt" ]; then
                        echo "✓ api/requirements.txt"
                    else
                        echo "✗ api/requirements.txt - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    if [ -f "client/requirements.txt" ]; then
                        echo "✓ client/requirements.txt"
                    else
                        echo "✗ client/requirements.txt - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    if [ -f "api/app.py" ]; then
                        echo "✓ api/app.py"
                    else
                        echo "✗ api/app.py - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    if [ -f "client/app.py" ]; then
                        echo "✓ client/app.py"
                    else
                        echo "✗ client/app.py - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    if [ -f "docker-compose.yml" ]; then
                        echo "✓ docker-compose.yml"
                    else
                        echo "✗ docker-compose.yml - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    # Dossiers obligatoires
                    if [ -d "api" ]; then
                        echo "✓ api/"
                    else
                        echo "✗ api/ - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    if [ -d "client" ]; then
                        echo "✓ client/"
                    else
                        echo "✗ client/ - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    if [ -d "tests" ]; then
                        echo "✓ tests/"
                    else
                        echo "✗ tests/ - MANQUANT"
                        error_count=$((error_count + 1))
                    fi
                    
                    echo ""
                    if [ $error_count -eq 0 ]; then
                        echo "✅ Tous les fichiers/dossiers requis sont présents"
                    else
                        echo "❌ $error_count fichiers/dossiers manquants"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Inspection Code') {
            steps {
                sh '''
                    echo "=== INSPECTION DU CODE ==="
                    
                    # Afficher les premières lignes des fichiers importants
                    echo "--- api/requirements.txt ---"
                    if [ -f "api/requirements.txt" ]; then
                        head -10 api/requirements.txt
                    else
                        echo "Fichier non trouvé"
                    fi
                    echo ""
                    
                    echo "--- client/requirements.txt ---"
                    if [ -f "client/requirements.txt" ]; then
                        head -10 client/requirements.txt
                    else
                        echo "Fichier non trouvé"
                    fi
                    echo ""
                    
                    echo "--- docker-compose.yml (extrait) ---"
                    if [ -f "docker-compose.yml" ]; then
                        head -20 docker-compose.yml
                    else
                        echo "Fichier non trouvé"
                    fi
                    echo ""
                    
                    # Compter les lignes de code (simplifié)
                    echo "--- STATISTIQUES DE CODE ---"
                    if [ -d "api" ]; then
                        api_lines=$(find api -name "*.py" -exec cat {} \\; 2>/dev/null | wc -l || echo "0")
                        echo "API: $api_lines lignes Python"
                    else
                        echo "API: dossier manquant"
                    fi
                    
                    if [ -d "client" ]; then
                        client_lines=$(find client -name "*.py" -exec cat {} \\; 2>/dev/null | wc -l || echo "0")
                        echo "Client: $client_lines lignes Python"
                    else
                        echo "Client: dossier manquant"
                    fi
                    
                    if [ -d "tests" ]; then
                        tests_lines=$(find tests -name "*.py" -exec cat {} \\; 2>/dev/null | wc -l || echo "0")
                        echo "Tests: $tests_lines lignes Python"
                    else
                        echo "Tests: dossier manquant"
                    fi
                '''
            }
        }
        
        stage('Validation Syntaxe Docker') {
            steps {
                script {
                    echo "Validation de la syntaxe Docker..."
                    
                    sh '''
                        if command -v docker-compose >/dev/null 2>&1; then
                            echo "Validation de docker-compose.yml..."
                            if docker-compose config -q; then
                                echo "✓ docker-compose.yml valide"
                            else
                                echo "✗ docker-compose.yml invalide"
                            fi
                        else
                            echo "docker-compose non disponible, skip de la validation"
                        fi
                    '''
                }
            }
        }
        
        stage('Génération Rapport') {
            steps {
                sh '''
                    echo "=== RAPPORT DE VALIDATION ===" > validation_report.txt
                    date >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "STRUCTURE DU PROJET:" >> validation_report.txt
                    echo "=====================" >> validation_report.txt
                    ls -la >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "FICHIERS PYTHON:" >> validation_report.txt
                    echo "================" >> validation_report.txt
                    find . -name "*.py" | head -10 >> validation_report.txt 2>/dev/null || echo "Aucun fichier Python trouvé" >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "DEPENDANCES API:" >> validation_report.txt
                    echo "================" >> validation_report.txt
                    if [ -f "api/requirements.txt" ]; then
                        cat api/requirements.txt >> validation_report.txt
                    else
                        echo "Fichier non trouvé" >> validation_report.txt
                    fi
                    echo "" >> validation_report.txt
                    
                    echo "DEPENDANCES CLIENT:" >> validation_report.txt
                    echo "===================" >> validation_report.txt
                    if [ -f "client/requirements.txt" ]; then
                        cat client/requirements.txt >> validation_report.txt
                    else
                        echo "Fichier non trouvé" >> validation_report.txt
                    fi
                    echo "" >> validation_report.txt
                    
                    echo "VALIDATION TERMINEE: $(date)" >> validation_report.txt
                '''
            }
        }
    }
    
    post {
        always {
            script {
                // Archivage du rapport
                archiveArtifacts artifacts: 'validation_report.txt', allowEmptyArchive: true
                
                // Affichage du résumé
                sh '''
                    echo "=== RÉSUMÉ DU PIPELINE ==="
                    echo "Rapport généré: validation_report.txt"
                    echo ""
                    echo "Prochaines étapes recommandées:"
                    echo "1. Configurer un agent Jenkins avec Python et Docker"
                    echo "2. Utiliser un environnement cloud avec les outils requis"
                    echo "3. Contacter l'administrateur Jenkins pour installer Python"
                '''
            }
        }
        
        success {
            echo '✅ Validation de la structure terminée avec succès!'
        }
        
        failure {
            echo '❌ La structure du projet a des problèmes!'
        }
    }
}