pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"

        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'

        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
        PROMETHEUS_PUSH_GATEWAY = 'http://prometheus.host.internal'

        PYTHON_PACKAGE_VERSION = 'N/A'
        
        // Variables AWS
        AWS_REGION = 'us-east-1'
        TF_WORKING_DIR = "${WORKSPACE}/cloud_infrastructure"
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Vérification des Outils et Infrastructure') {
            steps {
                script {
                    echo "Vérification d'AWS CLI..."
                    def awsCliCheck = sh(script: 'which aws || echo "NOT_FOUND"', returnStdout: true).trim()
                    if (awsCliCheck == "NOT_FOUND") {
                        error "AWS CLI n'est pas installé. Veuillez l'installer sur l'agent Jenkins."
                    } else {
                        sh 'aws --version'
                        echo "✅ AWS CLI est installé"
                    }

                    echo "Vérification de Terraform..."
                    def terraformCheck = sh(script: 'which terraform || echo "NOT_FOUND"', returnStdout: true).trim()
                    if (terraformCheck == "NOT_FOUND") {
                        echo "Installation de Terraform..."
                        sh """
                            sudo apt-get update -y
                            sudo apt-get install -y unzip
                            wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
                            unzip terraform_1.5.0_linux_amd64.zip
                            sudo mv terraform /usr/local/bin/
                            terraform --version
                        """
                    } else {
                        sh 'terraform --version'
                        echo "✅ Terraform est installé"
                    }

                    echo "Vérification du dossier d'infrastructure..."
                    if (!fileExists(TF_WORKING_DIR)) {
                        error "Le dossier d'infrastructure ${TF_WORKING_DIR} n'existe pas!"
                    }
                    sh "ls -la ${TF_WORKING_DIR}"

                    echo "Vérification/Création de la clé SSH..."
                    sh """
                        mkdir -p ~/.ssh
                        if [ ! -f ~/.ssh/id_rsa.pub ]; then
                            echo "Création d'une nouvelle paire de clés SSH..."
                            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N '' -q
                        fi
                        echo "Clé publique SSH :"
                        cat ~/.ssh/id_rsa.pub
                    """

                    echo "Vérification de la configuration AWS..."
                    sh """
                        # Test de la configuration AWS existante
                        if aws sts get-caller-identity; then
                            echo "✅ Configuration AWS valide détectée"
                        else
                            echo "❌ ERREUR: Configuration AWS invalide"
                            echo "Veuillez configurer AWS CLI sur l'agent Jenkins avec:"
                            echo "aws configure set aws_access_key_id VOTRE_ACCESS_KEY"
                            echo "aws configure set aws_secret_access_key VOTRE_SECRET_KEY"
                            echo "aws configure set region us-east-1"
                            exit 1
                        fi
                    """
                }
            }
        }

        stage('Nettoyage des Ressources Existantes') {
            steps {
                script {
                    echo "🧹 Nettoyage des anciennes ressources..."
                    sh """
                        # Suppression des anciennes clés SSH pour éviter les conflits
                        aws ec2 describe-key-pairs --query 'KeyPairs[?starts_with(KeyName, \\`user-management-deployer-key-\\`)].KeyName' --output text | while read key_name; do
                            echo "Suppression de la clé: \$key_name"
                            aws ec2 delete-key-pair --key-name "\$key_name" || echo "Impossible de supprimer \$key_name"
                        done

                        # Nettoyage des anciennes instances
                        INSTANCE_IDS=\$(aws ec2 describe-instances \\
                            --filters "Name=tag:Name,Values=user-management-app" \\
                            --query "Reservations[].Instances[].InstanceId" \\
                            --output text)
                        
                        if [ -n "\$INSTANCE_IDS" ]; then
                            echo "Suppression des anciennes instances: \$INSTANCE_IDS"
                            aws ec2 terminate-instances --instance-ids \$INSTANCE_IDS
                            echo "Attente de la suppression des instances..."
                            aws ec2 wait instance-terminated --instance-ids \$INSTANCE_IDS
                        fi

                        # Nettoyage des Elastic IPs non associées
                        EIP_ALLOCATIONS=\$(aws ec2 describe-addresses \\
                            --filters "Name=tag:Name,Values=user-management-eip" \\
                            --query "Addresses[].AllocationId" \\
                            --output text)
                        
                        if [ -n "\$EIP_ALLOCATIONS" ]; then
                            echo "Suppression des Elastic IPs: \$EIP_ALLOCATIONS"
                            for allocation in \$EIP_ALLOCATIONS; do
                                aws ec2 release-address --allocation-id \$allocation || echo "Impossible de supprimer \$allocation"
                            done
                        fi

                        # Nettoyage des Security Groups
                        SG_IDS=\$(aws ec2 describe-security-groups \\
                            --filters "Name=group-name,Values=user-management-sg" \\
                            --query "SecurityGroups[].GroupId" \\
                            --output text)
                        
                        if [ -n "\$SG_IDS" ]; then
                            echo "Suppression des Security Groups: \$SG_IDS"
                            for sg_id in \$SG_IDS; do
                                aws ec2 delete-security-group --group-id \$sg_id || echo "Impossible de supprimer \$sg_id"
                            done
                        fi

                        # Nettoyage des subnets (si vides)
                        SUBNET_IDS=\$(aws ec2 describe-subnets \\
                            --filters "Name=tag:Name,Values=user-management-public-subnet" \\
                            --query "Subnets[].SubnetId" \\
                            --output text)
                        
                        if [ -n "\$SUBNET_IDS" ]; then
                            echo "Vérification des subnets à supprimer: \$SUBNET_IDS"
                            for subnet_id in \$SUBNET_IDS; do
                                # Vérifier si le subnet est vide
                                INSTANCE_COUNT=\$(aws ec2 describe-instances \\
                                    --filters "Name=subnet-id,Values=\$subnet_id" \\
                                    --query "length(Reservations[].Instances[])" \\
                                    --output text)
                                
                                if [ "\$INSTANCE_COUNT" -eq "0" ]; then
                                    echo "Suppression du subnet vide: \$subnet_id"
                                    aws ec2 delete-subnet --subnet-id \$subnet_id || echo "Impossible de supprimer \$subnet_id"
                                else
                                    echo "Subnet \$subnet_id non vide (\$INSTANCE_COUNT instances), conservation"
                                fi
                            done
                        fi
                    """
                }
            }
        }

        stage('Fix Terraform Configuration') {
            steps {
                script {
                    echo "🔧 Correction de la configuration Terraform..."
                    // CORRECTION ICI : Utilisation de doubles quotes sans interpolation
                    sh '''
                        cd ''' + TF_WORKING_DIR + '''
                        
                        # Supprimer les outputs de main.tf s'ils existent
                        echo "Nettoyage des outputs dans main.tf..."
                        sed -i '/^output ".*" {/,/^}$/d' main.tf || echo "Aucun output à supprimer dans main.tf"
                        
                        # S'assurer que outputs.tf existe avec le bon contenu
                        if [ ! -f outputs.tf ]; then
                            echo "Création du fichier outputs.tf..."
                            cat > outputs.tf << 'EOF'
output "instance_public_ip" {
  description = "Public IP address of the EC2 instance"
  value       = aws_eip.app.public_ip
}

output "application_url" {
  description = "URL of the deployed application"
  value       = "http://${aws_eip.app.public_ip}:5000"
}

output "ssh_connection_command" {
  description = "SSH connection command"
  value       = "ssh -i ~/.ssh/id_rsa ubuntu@${aws_eip.app.public_ip}"
}

output "vpc_id" {
  description = "ID of the VPC used"
  value       = data.aws_vpc.existing.id
}

output "subnet_id" {
  description = "ID of the subnet used"
  value       = aws_subnet.public.id
}
EOF
                        else
                            echo "✅ Fichier outputs.tf existe déjà"
                        fi

                        # Correction du CIDR du subnet pour éviter les conflits
                        echo "🔧 Correction du CIDR du subnet pour éviter les conflits..."
                        sed -i 's|10.0.1.0/24|10.0.2.0/24|' main.tf || echo "Modification CIDR échouée, continuation..."

                        # Ré-initialisation Terraform après modification
                        echo "Ré-initialisation de Terraform..."
                        terraform init -input=false
                        
                        echo "Vérification de la configuration Terraform..."
                        terraform validate || echo "Validation échouée, continuation..."
                    '''
                }
            }
        }

        // ... (les autres stages restent inchangés) ...

        stage('Deploy to AWS') {
            steps {
                script {
                    echo "🚀 Déploiement sur AWS..."
                    
                    // CORRECTION ICI : Utilisation de simples quotes avec concaténation
                    sh '''
                        cd ''' + TF_WORKING_DIR + '''
                        
                        # Initialisation Terraform
                        echo "Initialisation de Terraform..."
                        terraform init -input=false
                        
                        # Validation du plan
                        echo "Validation de la configuration Terraform..."
                        terraform validate
                        
                        # Plan d'infrastructure
                        echo "Création du plan d'infrastructure..."
                        terraform plan -out=tfplan
                        
                        # Application de l'infrastructure
                        echo "Application de l'infrastructure..."
                        terraform apply -auto-approve tfplan
                        
                        # Récupération des outputs
                        INSTANCE_IP=$(terraform output -raw instance_public_ip)
                        APP_URL=$(terraform output -raw application_url)
                        
                        echo "📦 Infrastructure AWS déployée avec succès"
                        echo "🖥️  IP de l'instance: $INSTANCE_IP"
                        echo "🌐 URL de l'application: $APP_URL"
                        
                        # Attente que l'application soit disponible
                        echo "⏳ Attente du démarrage de l'application (peut prendre plusieurs minutes)..."
                        
                        # Tentative de connexion avec gestion d'erreur
                        COUNTER=0
                        MAX_RETRIES=18 # 3 minutes max (18 * 10 secondes)
                        while [ $COUNTER -lt $MAX_RETRIES ]; do
                            if curl -s -f http://$INSTANCE_IP:5000/health > /dev/null; then
                                echo "✅ Application disponible!"
                                break
                            else
                                echo "En attente... ($((COUNTER * 10)) secondes)"
                                sleep 10
                                COUNTER=$((COUNTER + 1))
                            fi
                        done
                        
                        if [ $COUNTER -eq $MAX_RETRIES ]; then
                            echo "⚠️  L'application ne répond pas après 3 minutes"
                            echo "Cela peut être normal si le déploiement est encore en cours"
                            echo "Vérifiez manuellement plus tard: http://$INSTANCE_IP:5000/health"
                        else
                            echo "✅ Application déployée et accessible sur: http://$INSTANCE_IP:5000"
                            # Test final de l'application
                            echo "Test de santé de l'application..."
                            curl -s http://$INSTANCE_IP:5000/health
                            echo "🎉 Déploiement AWS terminé avec succès!"
                        fi
                    '''
                }
            }
            
            post {
                success {
                    script {
                        def instance_ip = sh(script: "cd ${TF_WORKING_DIR} && terraform output -raw instance_public_ip", returnStdout: true).trim()
                        env.DEPLOYMENT_URL = "http://${instance_ip}:5000"
                        echo "🌐 Application déployée: ${env.DEPLOYMENT_URL}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult
                
                // Nettoyage des processus
                sh """
                    echo "Cleaning up processes..."
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                    echo "Cleanup completed"
                """

                def statusColor
                if (buildStatus == 'SUCCESS') {
                    statusColor = '#28a745'
                } else if (buildStatus == 'UNSTABLE') {
                    statusColor = '#ffc107' 
                } else {
                    statusColor = '#dc3545'
                }

                def emailTemplate = readFile(file: env.EMAIL_TEMPLATE_PATH)

                def emailBody = emailTemplate
                    .replace('${STATUS_COLOR}', statusColor)
                    .replace('${BUILD_STATUS}', buildStatus ?: 'UNKNOWN')
                    .replace('${JOB_NAME}', env.JOB_NAME ?: 'UNKNOWN')
                    .replace('${BUILD_NUMBER}', env.BUILD_NUMBER ?: '0')
                    .replace('${BUILD_DURATION}', currentBuild.durationString ?: '0s')
                    .replace('${NEXUS_URL}', env.NEXUS_URL ?: 'N/A')
                    .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY ?: 'N/A')
                    .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION ?: 'N/A')
                    .replace('${BUILD_URL}', env.BUILD_URL ?: 'N/A')
                    .replace('${DEPLOYMENT_URL}', env.DEPLOYMENT_URL ?: 'N/A')
                    .replace('${CURRENT_YEAR}', new Date().format("yyyy"))

                emailext (
                    subject: "Build ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
        
        success {
            echo "🎉 Pipeline exécuté avec succès! Application déployée sur AWS"
        }
        
        failure {
            echo "❌ Pipeline a échoué. Vérifiez les logs pour plus de détails."
        }
    }
}