pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"

        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'

        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
        PROMETHEUS_PUSH_GATEWAY = 'http://prometheus.host.internal'
        

    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt" }
                }
                stage('Client Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt" }
                }
                stage('Test Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install pytest requests" }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install robotframework
                            ${VENV_PATH}/bin/pip install robotframework-requests
                            ${VENV_PATH}/bin/pip install robotframework-databaselibrary
                            ${VENV_PATH}/bin/pip install psycopg2-binary
                        """
                    }
                }
                stage('Prometheus Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install prometheus-client" }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server :"
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > /dev/null 2>&1 &
                        echo \$! > ${API_PID_FILE}
                        sleep 3
                    """

                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -s -f http://localhost:5000/health > /dev/null && \
                                    curl -s -f http://localhost:5000/ > /dev/null
                                """
                                echo "API is ready and responding!"
                                return true
                            } catch (Exception e) {
                                echo "API not ready yet, waiting..."
                                sleep 5
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps { sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short" }
                }
                stage('Model Tests') {
                    steps { sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short" }
                }
                stage('Unit Tests') {
                    steps { sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short" }
                }
                stage('Robot Framework Tests') {
                    steps {
                        script {
                            sh """
                                mkdir -p ${ROBOT_REPORTS_DIR}
                                cd ${APP_DIR}/robot_tests
                                set +e
                                ${VENV_PATH}/bin/robot \
                                    --outputdir ${ROBOT_REPORTS_DIR} \
                                    --output output.xml \
                                    --report report.html \
                                    --log log.html \
                                    --xunit xunit.xml \
                                    . || echo "Tests Robot Framework terminés avec échecs"
                                set -e
                            """
                        }
                    }
                    post {
                        always {
                            script {
                                def outputFile = "${ROBOT_REPORTS_DIR}/output.xml"
                                if (fileExists(outputFile)) {
                                    echo "Publication finale du rapport Robot Framework: ${outputFile}"
                                    robot outputPath: "${ROBOT_REPORTS_DIR}",
                                          outputFileName: "output.xml",
                                          reportFileName: "report.html",
                                          logFileName: "log.html",
                                          disableArchiveOutput: true, // empêche l’archivage workspace
                                          passThreshold: 70.0,
                                          unstableThreshold: 50.0
                                } else {
                                    echo "Aucun fichier de rapport Robot trouvé"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Push Metrics to Prometheus') {
            steps {
                script {
                    echo "Pushing metrics to Prometheus..."
                    def metrics = """
# HELP jenkins_custom_build_info Build information
# TYPE jenkins_custom_build_info gauge
jenkins_custom_build_info{job="${env.JOB_NAME}", build_number="${env.BUILD_NUMBER}", result="${currentBuild.currentResult}"} 1

# HELP jenkins_custom_build_duration_seconds Build duration in seconds
# TYPE jenkins_custom_build_duration_seconds gauge
jenkins_custom_build_duration_seconds{job="${env.JOB_NAME}"} ${currentBuild.duration / 1000}
"""
                    try {
                        sh """
                            echo '${metrics}' | curl --connect-timeout 5 --max-time 10 -X POST --data-binary @- ${PROMETHEUS_PUSH_GATEWAY}/metrics/job/jenkins/instance/${env.JOB_NAME} || echo "Prometheus push failed"
                        """
                        echo "Metrics pushed to Prometheus successfully"
                    } catch (Exception e) {
                        echo "Failed to push metrics to Prometheus: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server :"
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            echo "Stopping API process: \$PID"
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                            echo "API server stopped"
                        else
                            echo "No API PID file found, stopping any python app processes"
                            pkill -f "python.*app\\.py" 2>/dev/null || true
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package :"
                    sh '${VENV_PATH}/bin/pip install setuptools wheel'
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype : "
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} \
                                dist/* || echo "Nexus upload failed"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                BUILD_STATUS = currentBuild.currentResult
                sh """
                    echo "Cleaning up processes..."
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                    echo "Cleanup completed"
                """

                // Déterminer la couleur selon le statut
                def statusColor
                if (BUILD_STATUS == 'SUCCESS') {
                    statusColor = '#28a745' // Vert
                } else if (BUILD_STATUS == 'UNSTABLE') {
                    statusColor = '#ffc107' // Jaune
                } else {
                    statusColor = '#dc3545' // Rouge
                }
                
                // Charger le template HTML
                def emailTemplate = readFile(file: env.EMAIL_TEMPLATE_PATH)
                
                // Remplacer les variables dans le template
                def emailBody = emailTemplate
                    .replace('${STATUS_COLOR}', statusColor)
                    .replace('${BUILD_STATUS}', BUILD_STATUS)
                    .replace('${JOB_NAME}', env.JOB_NAME)
                    .replace('${BUILD_NUMBER}', env.BUILD_NUMBER)
                    .replace('${BUILD_DURATION}', currentBuild.durationString)
                    .replace('${NEXUS_URL}', env.NEXUS_URL)
                    .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY)
                    .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION)
                    .replace('${BUILD_URL}', env.BUILD_URL)
                    .replace('${CURRENT_YEAR}', new Date().format("yyyy"))
                
                emailext (
                    subject: "Build ${BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )

            }
            cleanWs()
        }
    }
}
