pipeline {
    agent any
    
    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        PYTHON_PATH = "/usr/bin/python3"  // Chemin explicite vers Python
    }
    
    stages {
        stage('Check Python Installation') {
            steps {
                script {
                    echo "Vérification de l'installation de Python..."
                    
                    sh '''
                        # Vérifier si Python 3 est installé
                        if command -v python3 >/dev/null 2>&1; then
                            echo "Python 3 est déjà installé"
                            python3 --version
                        else
                            echo "Python 3 n'est pas installé"
                            # Essayer d'installer sans sudo
                            if command -v apt-get >/dev/null 2>&1; then
                                echo "Tentative d'installation avec apt-get..."
                                apt-get update && apt-get install -y python3 python3-venv
                            elif command -v yum >/dev/null 2>&1; then
                                echo "Tentative d'installation avec yum..."
                                yum install -y python3
                            elif command -v apk >/dev/null 2>&1; then
                                echo "Tentative d'installation avec apk..."
                                apk add python3 py3-pip
                            else
                                echo "Gestionnaire de paquets non trouvé"
                                exit 1
                            fi
                        fi
                    '''
                }
            }
        }
        
        stage('Create Virtual Environment') {
            steps {
                sh '''
                    # Création de l'environnement virtuel avec le chemin absolu
                    ${PYTHON_PATH} -m venv ${VENV_PATH}
                    
                    # Vérification
                    if [ -d "${VENV_PATH}" ]; then
                        echo "Environnement virtuel créé avec succès"
                    else
                        echo "Échec de la création de l'environnement virtuel"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                sh '''
                    # Activation de l'environnement et mise à jour de pip
                    source ${VENV_PATH}/bin/activate
                    pip install --upgrade pip
                    
                    # Installation des dépendances de base
                    pip install wheel setuptools
                '''
            }
        }
        
        stage('Install Python Dependencies') {
            steps {
                sh '''
                    source ${VENV_PATH}/bin/activate
                    
                    echo "Installation des dépendances API..."
                    cd api
                    pip install -r requirements.txt
                    
                    echo "Installation des dépendances Client..."
                    cd ../client
                    pip install -r requirements.txt
                    
                    echo "Installation des outils de test..."
                    pip install pytest requests
                '''
            }
        }
        
        stage('Run Basic Tests') {
            steps {
                sh '''
                    source ${VENV_PATH}/bin/activate
                    cd tests
                    
                    echo "Exécution des tests basiques..."
                    python -m pytest -v test_basic.py --tb=short
                '''
            }
        }
        
        stage('Check Code Quality') {
            steps {
                sh '''
                    source ${VENV_PATH}/bin/activate
                    
                    echo "Vérification de la syntaxe Python..."
                    # Vérification des fichiers principaux
                    python -m py_compile api/app.py || echo "Note: Erreur de compilation API"
                    python -m py_compile client/app.py || echo "Note: Erreur de compilation Client"
                    
                    echo "Vérification des imports..."
                    python -c "
                    try:
                        import fastapi
                        print('✓ fastapi importé')
                    except ImportError as e:
                        print('✗ fastapi non importable:', e)
                        
                    try:
                        import flask
                        print('✓ flask importé')
                    except ImportError as e:
                        print('✗ flask non importable:', e)
                        
                    try:
                        import sqlalchemy
                        print('✓ sqlalchemy importé')
                    except ImportError as e:
                        print('✗ sqlalchemy non importable:', e)
                    "
                '''
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    echo "Tentative de construction des images Docker..."
                    
                    // Essayer de builder seulement si Docker est disponible
                    sh '''
                        if command -v docker >/dev/null 2>&1 && command -v docker-compose >/dev/null 2>&1; then
                            echo "Docker et Docker Compose disponibles"
                            docker-compose build --no-cache
                        else
                            echo "Docker non disponible, skip du build Docker"
                        fi
                    '''
                }
            }
        }
        
        stage('Verify Structure') {
            steps {
                sh '''
                    echo "Vérification de la structure du projet..."
                    
                    # Vérification des fichiers requis
                    REQUIRED_FILES=(
                        "api/requirements.txt"
                        "client/requirements.txt" 
                        "api/app.py"
                        "client/app.py"
                        "docker-compose.yml"
                    )
                    
                    for file in "${REQUIRED_FILES[@]}"; do
                        if [ -f "$file" ]; then
                            echo "✓ $file existe"
                        else
                            echo "✗ $file manquant"
                        fi
                    done
                    
                    # Vérification des dossiers
                    REQUIRED_DIRS=(
                        "api"
                        "client"
                        "tests"
                    )
                    
                    for dir in "${REQUIRED_DIRS[@]}"; do
                        if [ -d "$dir" ]; then
                            echo "✓ $dir existe"
                        else
                            echo "✗ $dir manquant"
                        fi
                    done
                '''
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "Nettoyage..."
                # Essayer de nettoyer Docker si disponible
                if command -v docker-compose >/dev/null 2>&1; then
                    docker-compose down 2>/dev/null || true
                fi
                
                echo "=== RAPPORT FINAL ==="
                echo "Environnement virtuel: ${VENV_PATH}"
                echo "Python path: ${PYTHON_PATH}"
            '''
            
            // Archivage des logs importants
            archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
        }
        
        success {
            echo '✅ Pipeline exécuté avec succès!'
        }
        
        failure {
            echo '❌ Pipeline a échoué!'
        }
    }
}