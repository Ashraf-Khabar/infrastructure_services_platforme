pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"

        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'

        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
        PROMETHEUS_PUSH_GATEWAY = 'http://prometheus.host.internal'

        PYTHON_PACKAGE_VERSION = 'N/A'
        
        AWS_REGION = 'us-east-1'
        AWS_ECR_REGISTRY = '036386574460.dkr.ecr.us-east-1.amazonaws.com'
        ECR_API_REPOSITORY = 'user-management-api'
        ECR_CLIENT_REPOSITORY = 'user-management-client'
        ECS_CLUSTER = 'user-management-cluster'
        ECS_SERVICE = 'user-management-service'
        ECS_TASK_DEFINITION = 'user-management-task'
        AWS_CREDENTIALS_ID = 'aws-credentials'
        
        SUBNET_IDS = 'subnet-07c7753f7a3e568fe,subnet-0855ecf8e69a20c39,subnet-0e49091aac1b8dc12'
        SECURITY_GROUP_ID = 'sg-0d0b46466c78a871e'
        
        // Database configuration
        DB_INSTANCE_IDENTIFIER = 'user-management-db'
        DB_NAME = 'user_management'
        DB_USERNAME = 'appuser'
        DB_PASSWORD = 'apppassword'
        DB_INSTANCE_CLASS = 'db.t3.micro'
        DB_ENGINE = 'postgres'
        DB_ENGINE_VERSION = '15.4'
        DB_STORAGE = '20'
        
        // Application Environment Variables
        FLASK_ENV = 'production'
        FLASK_DEBUG = '0'
        REACT_APP_API_URL = 'http://localhost:5000'
        HOST = '0.0.0.0'
        PORT = '5000'
        CLIENT_PORT = '3000'
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl docker.io jq postgresql-client
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                    
                    echo "=== VERSIONS DES OUTILS ==="
                    echo "Python: $(python3 --version)"
                    echo "Pip: $(${VENV_PATH}/bin/pip --version)"
                    echo "AWS CLI: $(aws --version 2>&1)"
                    echo "Docker: $(docker --version)"
                    echo "jq: $(jq --version)"
                    echo "psql: $(psql --version)"
                    echo "==========================="
                '''
            }
        }

        stage('Check AWS Configuration') {
            steps {
                script {
                    echo "Checking AWS configuration..."
                    try {
                        withCredentials([[
                            $class: 'UsernamePasswordMultiBinding',
                            credentialsId: env.AWS_CREDENTIALS_ID,
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            echo "AWS credentials found successfully"
                            sh 'echo "true" > /tmp/aws_credentials_available'
                        }
                    } catch (Exception e) {
                        echo "WARNING: AWS credentials not found"
                        sh 'echo "false" > /tmp/aws_credentials_available'
                    }
                }
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt" 
                    }
                }
                stage('Client Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt" 
                    }
                }
                stage('Test Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install pytest requests" 
                    }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install robotframework
                            ${VENV_PATH}/bin/pip install robotframework-requests
                            ${VENV_PATH}/bin/pip install robotframework-databaselibrary
                            ${VENV_PATH}/bin/pip install psycopg2-binary
                        """
                    }
                }
                stage('Prometheus Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install prometheus-client" 
                    }
                }
                stage('AWS Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install boto3
                        """
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server"
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > /dev/null 2>&1 &
                        echo \$! > ${API_PID_FILE}
                        sleep 3
                    """

                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -s -f http://localhost:5000/health > /dev/null && \
                                    curl -s -f http://localhost:5000/ > /dev/null
                                """
                                echo "API is ready and responding!"
                                return true
                            } catch (Exception e) {
                                echo "API not ready yet, waiting..."
                                sleep 5
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps { 
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short" 
                    }
                }
                stage('Model Tests') {
                    steps { 
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short" 
                    }
                }
                stage('Unit Tests') {
                    steps { 
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short" 
                    }
                }
                stage('Robot Framework Tests') {
                    steps {
                        script {
                            sh """
                                mkdir -p ${ROBOT_REPORTS_DIR}
                                cd ${APP_DIR}/robot_tests
                                set +e
                                ${VENV_PATH}/bin/robot \
                                    --outputdir ${ROBOT_REPORTS_DIR} \
                                    --output output.xml \
                                    --report report.html \
                                    --log log.html \
                                    --xunit xunit.xml \
                                    . || echo "Robot Framework tests finished with failures"
                                set -e
                            """
                        }
                    }
                    post {
                        always {
                            script {
                                def outputFile = "${ROBOT_REPORTS_DIR}/output.xml"
                                if (fileExists(outputFile)) {
                                    robot outputPath: "${ROBOT_REPORTS_DIR}",
                                          outputFileName: "output.xml",
                                          reportFileName: "report.html",
                                          logFileName: "log.html",
                                          disableArchiveOutput: true,
                                          passThreshold: 70.0,
                                          unstableThreshold: 50.0
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Push Metrics to Prometheus') {
            steps {
                script {
                    echo "Pushing metrics to Prometheus"
                    def metrics = """
# HELP jenkins_custom_build_info Build information
# TYPE jenkins_custom_build_info gauge
jenkins_custom_build_info{job="${env.JOB_NAME}", build_number="${env.BUILD_NUMBER}", result="${currentBuild.currentResult}"} 1

# HELP jenkins_custom_build_duration_seconds Build duration in seconds
# TYPE jenkins_custom_build_duration_seconds gauge
jenkins_custom_build_duration_seconds{job="${env.JOB_NAME}"} ${currentBuild.duration / 1000}
"""
                    try {
                        sh """
                            echo '${metrics}' | curl --connect-timeout 5 --max-time 10 -X POST --data-binary @- ${PROMETHEUS_PUSH_GATEWAY}/metrics/job/jenkins/instance/${env.JOB_NAME} || echo "Prometheus push failed"
                        """
                        echo "Metrics pushed to Prometheus successfully"
                    } catch (Exception e) {
                        echo "Failed to push metrics to Prometheus"
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server"
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            echo "Stopping API process: \$PID"
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                            echo "API server stopped"
                        else
                            echo "No API PID file found, stopping any python app processes"
                            pkill -f "python.*app\\.py" 2>/dev/null || true
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package"
                    sh '${VENV_PATH}/bin/pip install setuptools wheel'
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                    
                    def packageVersion = sh(
                        script: "${VENV_PATH}/bin/python -c \"import setuptools; setup = setuptools.setup(); print(setup.get('version', 'N/A'))\" 2>/dev/null || echo 'N/A'",
                        returnStdout: true
                    ).trim()
                    env.PYTHON_PACKAGE_VERSION = packageVersion
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype"
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} \
                                dist/* || echo "Nexus upload failed"
                        """
                    }
                }
            }
        }

        stage('Verify ECR Access') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            echo "=== ECR REPOSITORIES ==="
                            aws ecr describe-repositories --region ${AWS_REGION}
                            
                            echo "=== CURRENT IMAGES ==="
                            aws ecr list-images --repository-name ${ECR_API_REPOSITORY} --region ${AWS_REGION}
                            aws ecr list-images --repository-name ${ECR_CLIENT_REPOSITORY} --region ${AWS_REGION}
                        """
                    }
                }
            }
        }

        stage('Create ECR Repositories') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            if ! aws ecr describe-repositories --repository-names ${ECR_API_REPOSITORY} >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${ECR_API_REPOSITORY}"
                                aws ecr create-repository --repository-name ${ECR_API_REPOSITORY}
                            else
                                echo "ECR repository already exists: ${ECR_API_REPOSITORY}"
                            fi
                            
                            if ! aws ecr describe-repositories --repository-names ${ECR_CLIENT_REPOSITORY} >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${ECR_CLIENT_REPOSITORY}"
                                aws ecr create-repository --repository-name ${ECR_CLIENT_REPOSITORY}
                            else
                                echo "ECR repository already exists: ${ECR_CLIENT_REPOSITORY}"
                            fi
                        """
                    }
                }
            }
        }

        stage('Build Docker Images') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Building Docker images for AWS ECR"
                    sh """
                        cd ${APP_DIR}/api
                        docker build -t ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${env.BUILD_NUMBER} .
                        docker tag ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${env.BUILD_NUMBER} ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest
                    """
                    sh """
                        cd ${APP_DIR}/client
                        docker build -t ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${env.BUILD_NUMBER} .
                        docker tag ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${env.BUILD_NUMBER} ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest
                    """
                }
            }
        }

        stage('Push to AWS ECR') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Pushing Docker images to AWS ECR"
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            ECR_PASSWORD=\$(aws ecr get-login-password --region ${AWS_REGION})
                            echo "\$ECR_PASSWORD" | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY}
                            
                            echo "Pushing API image..."
                            docker push ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest
                            
                            echo "Pushing Client image..."
                            docker push ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest
                            
                            echo "All images pushed successfully to ECR"
                        """
                    }
                }
            }
        }


        stage('Create RDS Database') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        // Étape 1: Vérifier si RDS existe
                        sh '''
                            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
                            aws configure set region us-east-1
                            
                            # Vérifier si l'instance RDS existe déjà
                            if aws rds describe-db-instances --db-instance-identifier user-management-db --region us-east-1 >/dev/null 2>&1; then
                                echo "RDS instance already exists"
                            else
                                echo "Creating new RDS instance..."
                                # Essayer de créer l'instance RDS
                                if aws rds create-db-instance \
                                    --db-instance-identifier user-management-db \
                                    --db-instance-class db.t3.micro \
                                    --engine postgres \
                                    --engine-version 15.4 \
                                    --master-username appuser \
                                    --master-user-password apppassword \
                                    --allocated-storage 20 \
                                    --db-name user_management \
                                    --vpc-security-group-ids sg-0d0b46466c78a871e \
                                    --db-subnet-group-name user-management-db-subnet-group \
                                    --publicly-accessible \
                                    --region us-east-1; then
                                    
                                    echo "RDS instance creation initiated successfully"
                                else
                                    echo "WARNING: Failed to create RDS instance (may need Service Linked Role)"
                                    echo "Continuing deployment with external database assumption..."
                                fi
                            fi
                        '''
                        
                        // Étape 2: Attendre que RDS soit disponible (seulement si créé)
                        sh '''
                            echo "Checking if RDS instance exists and waiting if needed..."
                            if aws rds describe-db-instances --db-instance-identifier user-management-db --region us-east-1 >/dev/null 2>&1; then
                                echo "Waiting for RDS instance to be available..."
                                aws rds wait db-instance-available \
                                    --db-instance-identifier user-management-db \
                                    --region us-east-1
                                    
                                # Étape 3: Récupérer l'endpoint
                                RDS_ENDPOINT=$(aws rds describe-db-instances \
                                    --db-instance-identifier user-management-db \
                                    --query 'DBInstances[0].Endpoint.Address' \
                                    --output text \
                                    --region us-east-1)
                                
                                echo "RDS endpoint: $RDS_ENDPOINT"
                                echo "postgresql://appuser:apppassword@$RDS_ENDPOINT:5432/user_management" > ${WORKSPACE}/database_url.txt
                                
                                # Étape 4: Tester la connexion
                                echo "Testing database connection..."
                                sleep 30
                                
                                # Essayer de se connecter
                                if PGPASSWORD=apppassword psql -h $RDS_ENDPOINT -U appuser -d user_management -c "SELECT 1;" >/dev/null 2>&1; then
                                    echo "✓ Database connection successful"
                                else
                                    echo "⚠️ Database connection failed, but continuing deployment..."
                                fi
                            else
                                echo "Using external database configuration (RDS not created)"
                                # Utiliser une configuration de base de données externe
                                echo "postgresql://appuser:apppassword@external-db-host:5432/user_management" > ${WORKSPACE}/database_url.txt
                            fi
                        '''
                    }
                }
            }
        }

        stage('Create ECS Task Definition with RDS') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    // Lire l'URL de la base de données
                    def databaseUrl = readFile(file: "${WORKSPACE}/database_url.txt").trim()
                    
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        writeFile file: 'task-definition.json', text: """
{
    "family": "${ECS_TASK_DEFINITION}",
    "networkMode": "awsvpc",
    "requiresCompatibilities": ["FARGATE"],
    "cpu": "1024",
    "memory": "2048",
    "executionRoleArn": "arn:aws:iam::036386574460:role/ecsTaskExecutionRole",
    "containerDefinitions": [
        {
            "name": "user-management-api",
            "image": "${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest",
            "essential": true,
            "environment": [
                {
                    "name": "DATABASE_URL",
                    "value": "${databaseUrl}"
                },
                {
                    "name": "FLASK_ENV",
                    "value": "${FLASK_ENV}"
                },
                {
                    "name": "FLASK_DEBUG",
                    "value": "${FLASK_DEBUG}"
                },
                {
                    "name": "HOST",
                    "value": "${HOST}"
                },
                {
                    "name": "PORT",
                    "value": "${PORT}"
                }
            ],
            "portMappings": [
                {
                    "containerPort": 5000,
                    "protocol": "tcp"
                }
            ],
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/user-management",
                    "awslogs-region": "${AWS_REGION}",
                    "awslogs-stream-prefix": "api"
                }
            },
            "healthCheck": {
                "command": [
                    "CMD-SHELL",
                    "sleep 30 && curl -f http://localhost:5000/health || exit 0"
                ],
                "interval": 60,
                "timeout": 10,
                "retries": 3,
                "startPeriod": 120
            }
        },
        {
            "name": "user-management-client",
            "image": "${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest",
            "essential": true,
            "environment": [
                {
                    "name": "REACT_APP_API_URL",
                    "value": "${REACT_APP_API_URL}"
                },
                {
                    "name": "HOST",
                    "value": "${HOST}"
                },
                {
                    "name": "PORT",
                    "value": "${CLIENT_PORT}"
                }
            ],
            "portMappings": [
                {
                    "containerPort": 3000,
                    "protocol": "tcp"
                }
            ],
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/user-management",
                    "awslogs-region": "${AWS_REGION}",
                    "awslogs-stream-prefix": "client"
                }
            },
            "healthCheck": {
                "command": [
                    "CMD-SHELL",
                    "sleep 45 && curl -f http://localhost:3000 || exit 0"
                ],
                "interval": 60,
                "timeout": 10,
                "retries": 3,
                "startPeriod": 150
            },
            "dependsOn": [
                {
                    "containerName": "user-management-api",
                    "condition": "START"
                }
            ]
        }
    ]
}
"""
                        
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            echo "Creating ECS Task Definition with RDS database"
                            
                            aws ecs register-task-definition \
                                --cli-input-json file://task-definition.json \
                                --region ${AWS_REGION}
                            
                            echo "ECS Task Definition created successfully with RDS database"
                        """
                    }
                }
            }
        }

        stage('Create ECS Service if Needed') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            # Check if service exists and get its status
                            service_status=""
                            if aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} >/dev/null 2>&1; then
                                service_status=\$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")
                            else
                                service_status="NOT_FOUND"
                            fi
                            
                            echo "Service status: \$service_status"
                            
                            if [ "\$service_status" = "ACTIVE" ]; then
                                echo "Updating existing service with new task definition..."
                                
                                aws ecs update-service \
                                    --cluster ${ECS_CLUSTER} \
                                    --service ${ECS_SERVICE} \
                                    --task-definition ${ECS_TASK_DEFINITION} \
                                    --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
                                    --region ${AWS_REGION}
                                    
                            elif [ "\$service_status" = "NOT_FOUND" ]; then
                                echo "Creating new ECS service..."
                                
                                aws ecs create-service \
                                    --cluster ${ECS_CLUSTER} \
                                    --service-name ${ECS_SERVICE} \
                                    --task-definition ${ECS_TASK_DEFINITION} \
                                    --desired-count 1 \
                                    --launch-type FARGATE \
                                    --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
                                    --region ${AWS_REGION}
                                    
                            else
                                echo "Service exists but is not ACTIVE (status: \$service_status). Waiting and retrying..."
                                sleep 30
                                
                                # Retry after waiting
                                service_status=\$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")
                                
                                if [ "\$service_status" = "ACTIVE" ]; then
                                    echo "Service is now ACTIVE, updating..."
                                    aws ecs update-service \
                                        --cluster ${ECS_CLUSTER} \
                                        --service ${ECS_SERVICE} \
                                        --task-definition ${ECS_TASK_DEFINITION} \
                                        --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
                                        --region ${AWS_REGION}
                                else
                                    echo "Service still not ACTIVE after waiting. Current status: \$service_status"
                                    echo "Attempting to delete and recreate the service..."
                                    
                                    # Try to delete the stuck service
                                    aws ecs delete-service \
                                        --cluster ${ECS_CLUSTER} \
                                        --service ${ECS_SERVICE} \
                                        --region ${AWS_REGION} \
                                        --force 2>/dev/null || echo "Delete failed or service already gone"
                                        
                                    sleep 10
                                    
                                    # Create new service
                                    aws ecs create-service \
                                        --cluster ${ECS_CLUSTER} \
                                        --service-name ${ECS_SERVICE} \
                                        --task-definition ${ECS_TASK_DEFINITION} \
                                        --desired-count 1 \
                                        --launch-type FARGATE \
                                        --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
                                        --region ${AWS_REGION}
                                fi
                            fi
                            
                            sleep 10
                        """
                    }
                }
            }
        }

        stage('Deploy to AWS ECS') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            if ! aws ecs describe-clusters --clusters ${ECS_CLUSTER} --region ${AWS_REGION} >/dev/null 2>&1; then
                                echo "Creating ECS cluster: ${ECS_CLUSTER}"
                                aws ecs create-cluster --cluster-name ${ECS_CLUSTER} --region ${AWS_REGION}
                                sleep 10
                            else
                                echo "ECS cluster already exists: ${ECS_CLUSTER}"
                            fi
                            
                            echo "Initiating ECS deployment..."
                            aws ecs update-service \
                                --cluster ${ECS_CLUSTER} \
                                --service ${ECS_SERVICE} \
                                --force-new-deployment \
                                --region ${AWS_REGION}
                            
                            echo "ECS deployment initiated successfully"
                            
                            sleep 10
                            
                            echo "Checking deployment status..."
                            aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION} \
                                --query 'services[0].deployments[0]'
                        """
                    }
                }
            }
        }

        stage('Verify AWS Deployment') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            echo "=== ECS SERVICE STATUS ==="
                            aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION} \
                                --query 'services[0].[serviceName, status, runningCount, desiredCount]' \
                                --output table
                            
                            echo "=== Waiting for tasks to stabilize (120 seconds) ==="
                            sleep 120
                            
                            echo "=== ECS TASKS ==="
                            aws ecs list-tasks \
                                --cluster ${ECS_CLUSTER} \
                                --service ${ECS_SERVICE} \
                                --region ${AWS_REGION} \
                                --query 'taskArns' \
                                --output table
                            
                            taskCount=\$(aws ecs list-tasks --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --region ${AWS_REGION} --query 'length(taskArns)' --output text)
                            
                            if [ "\$taskCount" -eq "0" ]; then
                                echo "❌ No running tasks found. Checking stopped tasks for errors..."
                                
                                # Check stopped tasks to understand why they failed
                                stopped_tasks=\$(aws ecs list-tasks --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --desired-status STOPPED --region ${AWS_REGION} --query 'taskArns' --output text 2>/dev/null || echo "")
                                
                                if [ ! -z "\$stopped_tasks" ]; then
                                    echo "=== STOPPED TASK ERRORS ==="
                                    for task_arn in \$stopped_tasks; do
                                        echo "Task: \$task_arn"
                                        stopped_reason=\$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks \$task_arn --region ${AWS_REGION} --query 'tasks[0].stoppedReason' --output text)
                                        echo "Stopped Reason: \$stopped_reason"
                                        
                                        # Get container exit codes and last status
                                        containers=\$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks \$task_arn --region ${AWS_REGION} --query 'tasks[0].containers[].[name, lastStatus, exitCode, reason]' --output text)
                                        echo "Containers Status:"
                                        echo "\$containers"
                                        
                                        # Get logs from CloudWatch for debugging
                                        echo "=== CLOUDWATCH LOGS INFO ==="
                                        aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks \$task_arn --region ${AWS_REGION} --query 'tasks[0].containers[].[name, logStreamName]' --output table
                                    done
                                fi
                                
                            else
                                echo "=== FINDING PUBLIC IP AND URLs ==="
                                taskArn=\$(aws ecs list-tasks --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --region ${AWS_REGION} --query 'taskArns[0]' --output text)
                                
                                if [ "\$taskArn" != "None" ]; then
                                    echo "Task ARN: \$taskArn"
                                    
                                    # Wait for task to be running and get network interface
                                    echo "Waiting for network interface to be assigned..."
                                    sleep 30
                                    
                                    # Get task details and extract network interface using jq
                                    taskDetails=\$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks \$taskArn --region ${AWS_REGION} --output json)
                                    eniId=\$(echo "\$taskDetails" | jq -r '.tasks[0].attachments[0].details[] | select(.name == "networkInterfaceId") | .value')
                                    
                                    if [ ! -z "\$eniId" ] && [ "\$eniId" != "null" ]; then
                                        echo "✅ Network Interface ID: \$eniId"
                                        
                                        publicIp=\$(aws ec2 describe-network-interfaces --network-interface-ids \$eniId --region ${AWS_REGION} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
                                        
                                        if [ "\$publicIp" != "None" ] && [ ! -z "\$publicIp" ]; then
                                            echo "🎉 APPLICATION DEPLOYED SUCCESSFULLY!"
                                            echo "========================================"
                                            echo "🌐 API URL: http://\${publicIp}:5000"
                                            echo "🩺 API Health Check: http://\${publicIp}:5000/health"
                                            echo "💻 Client URL: http://\${publicIp}:3000"
                                            echo "📊 Client Health: http://\${publicIp}:3000/health"
                                            echo "========================================"
                                            
                                            # Save URLs to files for email notification
                                            echo "http://\${publicIp}:3000" > \${WORKSPACE}/app_url.txt
                                            echo "http://\${publicIp}:5000" > \${WORKSPACE}/api_url.txt
                                            echo "\${publicIp}" > \${WORKSPACE}/public_ip.txt
                                            
                                            echo "Testing application endpoints (waiting 30 seconds for apps to start)..."
                                            sleep 30
                                            
                                            echo "Testing API Health check:"
                                            curl -s -f --connect-timeout 20 http://\${publicIp}:5000/health && echo "✅ API Health check PASSED" || echo "❌ API Health check FAILED"
                                        
                                            echo "Testing Client:"
                                            curl -s -f --connect-timeout 20 http://\${publicIp}:3000 && echo "✅ Client check PASSED" || echo "❌ Client check FAILED"
                                            
                                        else
                                            echo "❌ No public IP found for the task"
                                            echo "Task details for debugging:"
                                            echo "\$taskDetails" | jq .
                                        fi
                                    else
                                        echo "❌ No network interface found for the task"
                                        echo "Task status:"
                                        echo "\$taskDetails" | jq '.tasks[0].containers[] | {name: .name, status: .lastStatus, reason: .reason}'
                                    fi
                                else
                                    echo "❌ No tasks found for the service"
                                fi
                            fi
                            
                            echo "=== SERVICE EVENTS (last 10) ==="
                            aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION} \
                                --query 'services[0].events[0:10]' \
                                --output table
                                
                            echo "=== TASK STATUS SUMMARY ==="
                            aws ecs describe-tasks \
                                --cluster ${ECS_CLUSTER} \
                                --tasks \$(aws ecs list-tasks --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --region ${AWS_REGION} --query 'taskArns' --output text) \
                                --region ${AWS_REGION} \
                                --query 'tasks[].containers[].[name, lastStatus, reason]' \
                                --output table
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                env.BUILD_STATUS = currentBuild.currentResult
                def awsStatus = sh(script: 'cat /tmp/aws_credentials_available 2>/dev/null || echo "false"', returnStdout: true).trim()
                def awsDeploymentStatus = (awsStatus == 'true') ? 'COMPLETED' : 'SKIPPED (No AWS credentials)'
                
                def appUrl = "Not available"
                try {
                    appUrl = readFile(file: "${WORKSPACE}/app_url.txt").trim()
                } catch (Exception e) {
                    appUrl = "Not available"
                }
                
                sh """
                    echo "Cleaning up processes and resources"
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                    
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${env.BUILD_NUMBER} 2>/dev/null || true
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${env.BUILD_NUMBER} 2>/dev/null || true
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest 2>/dev/null || true
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest 2>/dev/null || true
                    
                    rm -f /tmp/aws_credentials_available 2>/dev/null || true
                    rm -f task-definition.json 2>/dev/null || true
                    rm -f ${WORKSPACE}/app_url.txt 2>/dev/null || true
                    rm -f ${WORKSPACE}/database_url.txt 2>/dev/null || true
                    echo "Cleanup completed"
                """

                def statusColor
                if (env.BUILD_STATUS == 'SUCCESS') {
                    statusColor = '#28a745'
                } else if (env.BUILD_STATUS == 'UNSTABLE') {
                    statusColor = '#ffc107' 
                } else {
                    statusColor = '#dc3545'
                }

                def emailTemplate = readFile(file: env.EMAIL_TEMPLATE_PATH)

                def emailBody = emailTemplate
                    .replace('${STATUS_COLOR}', statusColor)
                    .replace('${BUILD_STATUS}', env.BUILD_STATUS ?: 'UNKNOWN')
                    .replace('${JOB_NAME}', env.JOB_NAME ?: 'UNKNOWN')
                    .replace('${BUILD_NUMBER}', env.BUILD_NUMBER ?: '0')
                    .replace('${BUILD_DURATION}', currentBuild.durationString ?: '0s')
                    .replace('${NEXUS_URL}', env.NEXUS_URL ?: 'N/A')
                    .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY ?: 'N/A')
                    .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION ?: 'N/A')
                    .replace('${BUILD_URL}', env.BUILD_URL ?: 'N/A')
                    .replace('${AWS_REGION}', env.AWS_REGION ?: 'N/A')
                    .replace('${ECS_CLUSTER}', env.ECS_CLUSTER ?: 'N/A')
                    .replace('${AWS_DEPLOYMENT_STATUS}', awsDeploymentStatus)
                    .replace('${APP_URL}', appUrl ?: 'Not available')
                    .replace('${CURRENT_YEAR}', new Date().format("yyyy"))

                emailext (
                    subject: "Build ${env.BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
        
        success {
            script {
                echo "Build completed successfully!"
                def awsStatus = sh(script: 'cat /tmp/aws_credentials_available 2>/dev/null || echo "false"', returnStdout: true).trim()
                if (awsStatus == 'true') {
                    echo "- AWS ECR: ${env.AWS_ECR_REGISTRY}"
                    echo "- AWS ECS: ${env.ECS_CLUSTER}/${env.ECS_SERVICE}"
                    echo "- AWS RDS: ${env.DB_INSTANCE_IDENTIFIER}"
                    
                    try {
                        def appUrl = readFile(file: "${WORKSPACE}/app_url.txt").trim()
                        echo "-  Application URL: ${appUrl}"
                        echo "-  Health Check: ${appUrl}/health"
                    } catch (Exception e) {
                        echo "-  Application URL: Not available (check ECS service)"
                    }
                }
            }
        }
        
        failure {
            echo "Build failed! Check logs for details."
        }
        
        unstable {
            echo "Build unstable! Some tests may have failed."
        }
    }
}