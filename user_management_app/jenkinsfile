pipeline {
    agent { label 'python_slave_agent' }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"

        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'
        PYTHON_PACKAGE_VERSION = '1.0.0'

        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
        PROMETHEUS_PUSH_GATEWAY = 'http://prometheus.host.internal'
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/email-template.html"
    }

    stages {

        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt" }
                }
                stage('Client Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt" }
                }
                stage('Test Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install pytest requests" }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install robotframework
                            ${VENV_PATH}/bin/pip install robotframework-requests
                            ${VENV_PATH}/bin/pip install robotframework-databaselibrary
                            ${VENV_PATH}/bin/pip install psycopg2-binary
                        """
                    }
                }
                stage('Prometheus Dependencies') {
                    steps { sh "${VENV_PATH}/bin/pip install prometheus-client" }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server..."
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > /dev/null 2>&1 &
                        echo \$! > ${API_PID_FILE}
                        sleep 3
                    """
                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh "curl -s -f http://localhost:5000/health > /dev/null"
                                return true
                            } catch (Exception e) {
                                sleep 5
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps { sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short" }
                }
                stage('Model Tests') {
                    steps { sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short" }
                }
                stage('Unit Tests') {
                    steps { sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short" }
                }
                stage('Robot Framework Tests') {
                    steps {
                        script {
                            mkdir -p "${ROBOT_REPORTS_DIR}"
                            sh """
                                cd ${APP_DIR}/robot_tests
                                set +e
                                ${VENV_PATH}/bin/robot --outputdir ${ROBOT_REPORTS_DIR} \
                                    --output output.xml --report report.html --log log.html --xunit xunit.xml .
                                set -e
                            """
                        }
                        post {
                            always {
                                script {
                                    def outputFile = "${ROBOT_REPORTS_DIR}/output.xml"
                                    if (fileExists(outputFile)) {
                                        robot outputPath: "${ROBOT_REPORTS_DIR}",
                                              outputFileName: "output.xml",
                                              reportFileName: "report.html",
                                              logFileName: "log.html",
                                              disableArchiveOutput: true
                                    } else {
                                        echo "Aucun fichier Robot Framework trouvé"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Push Metrics to Prometheus') {
            steps {
                script {
                    echo "Pushing metrics to Prometheus..."
                    def metrics = """
# HELP jenkins_custom_build_info Build info
# TYPE jenkins_custom_build_info gauge
jenkins_custom_build_info{job="${env.JOB_NAME}", build_number="${env.BUILD_NUMBER}", result="${currentBuild.currentResult}"} 1

# HELP jenkins_custom_build_duration_seconds Build duration
# TYPE jenkins_custom_build_duration_seconds gauge
jenkins_custom_build_duration_seconds{job="${env.JOB_NAME}"} ${currentBuild.duration / 1000}
"""
                    sh "echo '${metrics}' | curl -X POST --data-binary @- ${PROMETHEUS_PUSH_GATEWAY}/metrics/job/jenkins/instance/${env.JOB_NAME} || echo 'Prometheus push failed'"
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                        else
                            pkill -f "python.*app\\.py" 2>/dev/null || true
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    sh '${VENV_PATH}/bin/pip install setuptools wheel'
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} dist/*
                        """
                    }
                }
            }
        }

    }

    post {
        always {
            script {
                BUILD_STATUS = currentBuild.currentResult

                // Nettoyage
                sh """
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                """

                // Déterminer couleur selon le statut
                def statusColor = (BUILD_STATUS == 'SUCCESS') ? '#28a745' :
                                  (BUILD_STATUS == 'UNSTABLE') ? '#ffc107' : '#dc3545'

                // Charger template HTML (si disponible)
                def emailBody = (fileExists(env.EMAIL_TEMPLATE_PATH)) ?
                    readFile(env.EMAIL_TEMPLATE_PATH)
                        .replace('${STATUS_COLOR}', statusColor)
                        .replace('${BUILD_STATUS}', BUILD_STATUS)
                        .replace('${JOB_NAME}', env.JOB_NAME)
                        .replace('${BUILD_NUMBER}', env.BUILD_NUMBER)
                        .replace('${BUILD_DURATION}', currentBuild.durationString)
                        .replace('${NEXUS_URL}', env.NEXUS_URL)
                        .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY)
                        .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION)
                        .replace('${BUILD_URL}', env.BUILD_URL)
                        .replace('${CURRENT_YEAR}', new Date().format("yyyy"))
                    :
                    """
                    <h2>Build ${BUILD_STATUS}</h2>
                    <p>Job: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p>Duration: ${currentBuild.durationString}</p>
                    <p>Build URL: <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                    """

                // Envoyer le mail
                emailext (
                    subject: "Build ${BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )

                // Nettoyage workspace
                cleanWs()
            }
        }
    }
}
