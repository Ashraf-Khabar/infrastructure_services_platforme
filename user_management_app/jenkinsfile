pipeline {
    agent {
        docker {
            image 'python:3.9-slim'
        }
    }
    
    stages {
        stage('Vérification de l\'environnement') {
            steps {
                script {
                    sh '''
                        echo "=== ENVIRONNEMENT ==="
                        python --version
                        pip --version
                        uname -a
                    '''
                }
            }
        }
        
        stage('Installation des dépendances') {
            steps {
                script {
                    sh '''
                        pip install --upgrade pip
                        
                        # Installer les dépendances de l'API
                        cd api && pip install -r requirements.txt && cd ..
                        
                        # Installer les dépendances du client
                        cd client && pip install -r requirements.txt && cd ..
                        
                        # Installer pytest pour les tests
                        pip install pytest requests
                    '''
                }
            }
        }
        
        stage('Tests unitaires') {
            steps {
                script {
                    sh '''
                        echo "=== LANCEMENT DES TESTS ==="
                        python -m pytest tests/ -v --junitxml=test-results.xml
                    '''
                }
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }
        
        stage('Validation du code') {
            steps {
                script {
                    sh '''
                        echo "=== VALIDATION DU CODE ==="
                        
                        # Vérifier la syntaxe Python
                        echo "Vérification syntaxe API..."
                        python -m py_compile api/*.py
                        python -m py_compile api/routes/*.py
                        
                        echo "Vérification syntaxe Client..."
                        python -m py_compile client/*.py
                        
                        echo "Vérification syntaxe Tests..."
                        python -m py_compile tests/*.py
                        
                        # Vérifier les imports
                        echo "Vérification des imports..."
                        python -c "
                        try:
                            from fastapi import FastAPI
                            from pydantic import BaseModel
                            import requests
                            import hashlib
                            print('Tous les imports fonctionnent')
                        except ImportError as e:
                            print(f'Import error: {e}')
                            exit(1)
                        "
                    '''
                }
            }
        }
        
        stage('Build et Test Docker (Simulation)') {
            steps {
                script {
                    sh '''
                        echo "=== SIMULATION DOCKER ==="
                        echo "Cette étape simule le build Docker qui serait fait ailleurs"
                        
                        # Vérifier que les Dockerfiles existent
                        if [ -f "api/Dockerfile" ] && [ -f "client/Dockerfile" ]; then
                            echo "Dockerfiles présents"
                            
                            # Vérifier le contenu des Dockerfiles
                            echo "=== CONTENU DOCKERFILE API ==="
                            head -n 10 api/Dockerfile
                            
                            echo "=== CONTENU DOCKERFILE CLIENT ==="
                            head -n 10 client/Dockerfile
                            
                        else
                            echo "Dockerfiles manquants"
                            exit 1
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'test-results.xml', allowEmptyArchive: true
        }
        
        success {
            echo "Build Python réussi !"
            echo "Note: Le build Docker nécessite un agent avec Docker installé"
        }
        
        failure {
            echo "Build échoué !"
        }
    }
    
    options {
        timeout(time: 15, unit: 'MINUTES')
    }
}