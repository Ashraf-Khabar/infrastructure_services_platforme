pipeline {
    agent any
    
    stages {
        stage('Analyse Environment') {
            steps {
                script {
                    echo "Analyse de l'environnement Jenkins..."
                    
                    // Vérifier ce qui est disponible
                    sh '''
                        echo "=== ENVIRONNEMENT DISPONIBLE ==="
                        echo "User: $(whoami)"
                        echo "Home: $HOME"
                        echo "PWD: $(pwd)"
                        echo "PATH: $PATH"
                        echo ""
                        
                        echo "=== COMMANDES DISPONIBLES ==="
                        for cmd in python python3 pip pip3 docker docker-compose apt-get yum apk; do
                            if command -v $cmd >/dev/null 2>&1; then
                                echo "✓ $cmd: $(which $cmd)"
                            else
                                echo "✗ $cmd: non disponible"
                            fi
                        done
                        
                        echo ""
                        echo "=== PERMISSIONS ==="
                        echo "Écriture dans $(pwd): $(touch test_write.txt 2>/dev/null && echo '✓' || echo '✗')"
                        rm -f test_write.txt 2>/dev/null || true
                        
                        echo ""
                        echo "=== STRUCTURE DU PROJET ==="
                        ls -la
                    '''
                }
            }
        }
        
        stage('Vérification Fichiers') {
            steps {
                sh '''
                    echo "=== VÉRIFICATION DES FICHIERS REQUIS ==="
                    
                    # Fichiers obligatoires
                    REQUIRED_FILES=(
                        "api/requirements.txt"
                        "client/requirements.txt"
                        "api/app.py"
                        "client/app.py"
                        "docker-compose.yml"
                    )
                    
                    ALL_FILES_EXIST=true
                    for file in "${REQUIRED_FILES[@]}"; do
                        if [ -f "$file" ]; then
                            echo "✓ $file"
                        else
                            echo "✗ $file - MANQUANT"
                            ALL_FILES_EXIST=false
                        fi
                    done
                    
                    # Dossiers obligatoires
                    REQUIRED_DIRS=("api" "client" "tests")
                    for dir in "${REQUIRED_DIRS[@]}"; do
                        if [ -d "$dir" ]; then
                            echo "✓ $dir/"
                        else
                            echo "✗ $dir/ - MANQUANT"
                            ALL_FILES_EXIST=false
                        fi
                    done
                    
                    if [ "$ALL_FILES_EXIST" = false ]; then
                        echo "❌ Des fichiers/dossiers requis manquent"
                        exit 1
                    else
                        echo "✅ Tous les fichiers/dossiers requis sont présents"
                    fi
                '''
            }
        }
        
        stage('Inspection Code') {
            steps {
                sh '''
                    echo "=== INSPECTION DU CODE ==="
                    
                    # Afficher les premières lignes des fichiers importants
                    echo "--- api/requirements.txt ---"
                    head -10 api/requirements.txt || echo "Impossible de lire le fichier"
                    echo ""
                    
                    echo "--- client/requirements.txt ---"
                    head -10 client/requirements.txt || echo "Impossible de lire le fichier"
                    echo ""
                    
                    echo "--- docker-compose.yml (extrait) ---"
                    head -20 docker-compose.yml || echo "Impossible de lire le fichier"
                    echo ""
                    
                    # Compter les lignes de code
                    echo "--- STATISTIQUES DE CODE ---"
                    echo "API: $(find api -name "*.py" -exec cat {} \\; | wc -l) lignes Python"
                    echo "Client: $(find client -name "*.py" -exec cat {} \\; | wc -l) lignes Python"
                    echo "Tests: $(find tests -name "*.py" -exec cat {} \\; | wc -l) lignes Python"
                '''
            }
        }
        
        stage('Validation Syntaxe Docker') {
            steps {
                script {
                    echo "Validation de la syntaxe Docker..."
                    
                    // Essayer de valider docker-compose si disponible
                    sh '''
                        if command -v docker-compose >/dev/null 2>&1; then
                            echo "Validation de docker-compose.yml..."
                            docker-compose config -q && echo "✓ docker-compose.yml valide" || echo "✗ docker-compose.yml invalide"
                        else
                            echo "docker-compose non disponible, skip de la validation"
                        fi
                    '''
                }
            }
        }
        
        stage('Génération Rapport') {
            steps {
                sh '''
                    echo "=== RAPPORT DE VALIDATION ===" > validation_report.txt
                    date >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "STRUCTURE DU PROJET:" >> validation_report.txt
                    echo "=====================" >> validation_report.txt
                    ls -la >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "FICHIERS PYTHON:" >> validation_report.txt
                    echo "================" >> validation_report.txt
                    find . -name "*.py" | head -10 >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "DEPENDANCES API:" >> validation_report.txt
                    echo "================" >> validation_report.txt
                    cat api/requirements.txt >> validation_report.txt 2>/dev/null || echo "Non lisible" >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "DEPENDANCES CLIENT:" >> validation_report.txt
                    echo "===================" >> validation_report.txt
                    cat client/requirements.txt >> validation_report.txt 2>/dev/null || echo "Non lisible" >> validation_report.txt
                    echo "" >> validation_report.txt
                    
                    echo "VALIDATION TERMINEE: $(date)" >> validation_report.txt
                '''
            }
        }
    }
    
    post {
        always {
            script {
                // Archivage du rapport
                archiveArtifacts artifacts: 'validation_report.txt', allowEmptyArchive: false
                
                // Affichage du résumé
                sh '''
                    echo "=== RÉSUMÉ DU PIPELINE ==="
                    echo "Rapport généré: validation_report.txt"
                    echo "Fichiers archivés: voir l'artefact Jenkins"
                    echo ""
                    echo "Prochaines étapes recommandées:"
                    echo "1. Configurer un agent Jenkins avec Python et Docker"
                    echo "2. Ou utiliser un environnement cloud avec les outils requis"
                    echo "3. Ou contacter l'administrateur Jenkins pour installer Python"
                '''
            }
        }
        
        success {
            echo '✅ Validation de la structure terminée avec succès!'
        }
        
        failure {
            echo '❌ La structure du projet a des problèmes!'
        }
    }
}