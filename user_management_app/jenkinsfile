pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        // Configuration email
        EMAIL_RECIPIENTS = 'test@example.com' // Modifier avec l'email de test
        BUILD_STATUS = "UNKNOWN"
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt"
                    }
                }
                stage('Client Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt"
                    }
                }
                stage('Test Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install pytest requests"
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server..."
                    sh """
                        cd ${APP_DIR}/api
                        ${VENV_PATH}/bin/python app.py &
                        echo \$! > ${API_PID_FILE}
                    """
                    
                    // Attendre que l'API soit démarrée
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -f http://localhost:5000/health > /dev/null 2>&1
                                """
                                echo "API is ready!"
                                return true
                            } catch (Exception e) {
                                sleep(2)
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short"
                    }
                }

                stage('Model Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short"
                    }
                }

                stage('Unit Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short"
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server..."
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            kill \$(cat ${API_PID_FILE}) 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                        fi
                        pkill -f "python app.py" 2>/dev/null || true
                        pkill -f "uvicorn" 2>/dev/null || true
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                // Déterminer le statut du build
                BUILD_STATUS = currentBuild.currentResult
                
                // Nettoyage
                sh """
                    pkill -f "python app.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                    rm -f ${API_PID_FILE} 2>/dev/null || true
                """
                
                // Envoyer l'email de notification
                emailext (
                    subject: "Build ${BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """
                        <h2>Résultats du build Jenkins</h2>
                        <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Numéro de build:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Statut:</strong> ${BUILD_STATUS}</p>
                        <p><strong>Durée:</strong> ${currentBuild.durationString}</p>
                        <p><strong>URL du build:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        
                        <h3>Détails des stages:</h3>
                        <ul>
                        ${getBuildStagesSummary()}
                        </ul>
                        
                        <p>Consultez MailHog pour voir cet email: http://mail.host.internal:8025</p>
                    """,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
        
        success {
            echo "Build réussi - Email de notification envoyé"
        }
        
        failure {
            echo "Build échoué - Email de notification envoyé"
        }
        
        unstable {
            echo "Build instable - Email de notification envoyé"
        }
    }
}

def getBuildStagesSummary() {
    def summary = ""
    currentBuild.rawBuild.getStages().each { stage ->
        def status = stage.getStatus().toString().toLowerCase()
        summary += "<li><strong>${stage.getName()}:</strong> <span style='color: ${status == 'success' ? 'green' : status == 'failure' ? 'red' : 'orange'}'>${status}</span></li>"
    }
    return summary
}