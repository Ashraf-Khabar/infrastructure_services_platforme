pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        
        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'  // Corrigé le nom
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'  // ✅ Juste l'ID maintenant
        PYTHON_PACKAGE_VERSION = '1.0.0'
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt"
                    }
                }
                stage('Client Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt"
                    }
                }
                stage('Test Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install pytest requests"
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server..."
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > api.log 2>&1 &
                        echo \$! > ${API_PID_FILE}
                    """
                    
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -f http://localhost:5000/health > /dev/null 2>&1
                                """
                                echo "API is ready!"
                                return true
                            } catch (Exception e) {
                                sleep(2)
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short"
                    }
                }

                stage('Model Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short"
                    }
                }

                stage('Unit Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short"
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server..."
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package..."
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype..."
                    
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            
                            # URL complète pour twine
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} \
                                dist/*
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                BUILD_STATUS = currentBuild.currentResult
                
                // Nettoyage plus ciblé
                sh """
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    # Nettoyage des processus Python de l'application seulement
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                """
                
                emailext (
                    subject: "Build ${BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """
                        <h2>Résultats du build Jenkins</h2>
                        <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Numéro de build:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Statut:</strong> ${BUILD_STATUS}</p>
                        <p><strong>Durée:</strong> ${currentBuild.durationString}</p>
                        <p><strong>URL du build:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        
                        <h3>Artefacts déployés:</h3>
                        <p>Package Python déployé sur Nexus: ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/</p>
                        
                        <p>Consultez MailHog pour voir cet email: http://mail.host.internal:8025</p>
                    """,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
    }
}