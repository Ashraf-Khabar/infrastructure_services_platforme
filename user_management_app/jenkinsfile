pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        
        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'
        PYTHON_PACKAGE_VERSION = '1.0.0'
        
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"
        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt"
                    }
                }
                stage('Client Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt"
                    }
                }
                stage('Test Dependencies') {
                    steps {
                        sh "${VENV_PATH}/bin/pip install pytest requests"
                    }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install robotframework
                            ${VENV_PATH}/bin/pip install robotframework-requests
                            ${VENV_PATH}/bin/pip install robotframework-databaselibrary
                            ${VENV_PATH}/bin/pip install psycopg2-binary
                        """
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server :"
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > api.log 2>&1 &
                        echo \$! > ${API_PID_FILE}
                    """
                    
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -f http://localhost:5000/health > /dev/null 2>&1
                                """
                                echo "API is ready!"
                                return true
                            } catch (Exception e) {
                                sleep(2)
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short"
                    }
                }

                stage('Model Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short"
                    }
                }

                stage('Unit Tests') {
                    steps {
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short"
                    }
                }

                stage('Robot Framework Tests') {
                    steps {
                        script {
                            sh """
                                mkdir -p ${ROBOT_REPORTS_DIR}
                                echo "=== Recherche des tests Robot Framework ==="
                                echo "Contenu de ${APP_DIR}/robot_tests/:"
                                ls -la ${APP_DIR}/robot_tests/
                                
                                if [ -d "${APP_DIR}/robot_tests/api" ]; then
                                    echo "Contenu du dossier api:"
                                    ls -la ${APP_DIR}/robot_tests/api/
                                fi
                                
                                # Se placer dans le dossier des tests
                                cd ${APP_DIR}/robot_tests
                                
                                # Exécuter les tests sans faire échouer le build
                                set +e
                                ${VENV_PATH}/bin/robot \
                                    --outputdir ${ROBOT_REPORTS_DIR} \
                                    --output output.xml \
                                    --report report.html \
                                    --log log.html \
                                    --xunit xunit.xml \
                                    . || echo "Tests Robot Framework terminés avec des échecs (build continue)"
                                set -e
                                
                                echo "=== Fichiers générés ==="
                                ls -la ${ROBOT_REPORTS_DIR}/
                            """
                        }
                    }
                    
                    post {
                        always {
                            script {
                                // Déterminer quel fichier de rapport utiliser
                                def outputFile = "output.xml"
                                if (!fileExists("${ROBOT_REPORTS_DIR}/${outputFile}")) {
                                    outputFile = "xunit.xml"
                                }
                                
                                if (fileExists("${ROBOT_REPORTS_DIR}/${outputFile}")) {
                                    echo "Publication du rapport Robot Framework: ${outputFile}"
                                    robot outputPath: "${ROBOT_REPORTS_DIR}", 
                                          outputFileName: outputFile,
                                          reportFileName: "report.html",
                                          logFileName: "log.html",
                                          disableArchiveOutput: false,
                                          passThreshold: 70.0,
                                          unstableThreshold: 50.0
                                } else {
                                    echo "Aucun fichier de rapport XML trouvé"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server :"
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package :"

                    sh '${VENV_PATH}/bin/pip install setuptools wheel'
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype : "
                    
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} \
                                dist/*
                        """
                    }
                }
            }
        }

        stage('Archive Reports') {
            steps {
                script {
                    echo "Archiving test reports..."
                    // Archiver les rapports Robot Framework
                    archiveArtifacts artifacts: 'robot_reports/*.html, robot_reports/*.xml', fingerprint: false
                    
                    // Archiver les logs de l'API
                    archiveArtifacts artifacts: 'api.log', fingerprint: false
                    
                    // Archiver les packages générés
                    archiveArtifacts artifacts: 'user_management_app/dist/*', fingerprint: false
                }
            }
        }
    }

    post {
        always {
            script {
                BUILD_STATUS = currentBuild.currentResult
                
                sh """
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    # Nettoyage des processus Python de l'application seulement
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                """

                // Vérification et publication des résultats Robot Framework
                script {
                    def robotFiles = [
                        "${ROBOT_REPORTS_DIR}/output.xml",
                        "${ROBOT_REPORTS_DIR}/xunit.xml"
                    ]
                    
                    def robotReportFound = false
                    for (file in robotFiles) {
                        if (fileExists(file)) {
                            echo "Publication finale du rapport Robot Framework: ${file}"
                            robot outputPath: "${ROBOT_REPORTS_DIR}", 
                                  outputFileName: new File(file).getName(),
                                  reportFileName: "report.html",
                                  logFileName: "log.html",
                                  disableArchiveOutput: false,
                                  passThreshold: 70.0,
                                  unstableThreshold: 50.0
                            robotReportFound = true
                            break
                        }
                    }
                    
                    if (!robotReportFound) {
                        echo "Aucun rapport Robot Framework trouvé pour publication finale"
                    }
                }

                def statusColor
                if (BUILD_STATUS == 'SUCCESS') {
                    statusColor = '#28a745' 
                } else if (BUILD_STATUS == 'UNSTABLE') {
                    statusColor = '#ffc107' 
                } else {
                    statusColor = '#dc3545' 
                }
                
                // Lire le template email
                def emailTemplate = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Build Notification</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: ${statusColor}; color: white; padding: 10px; border-radius: 5px; }
        .content { margin: 20px 0; }
        .details { background-color: #f8f9fa; padding: 15px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h2>Build ${BUILD_STATUS}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]</h2>
    </div>
    
    <div class="content">
        <p>Le build s'est terminé avec le statut: <strong>${BUILD_STATUS}</strong></p>
        
        <div class="details">
            <h3>Détails du build:</h3>
            <ul>
                <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                <li><strong>Durée:</strong> ${currentBuild.durationString}</li>
                <li><strong>URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                <li><strong>Nexus Repository:</strong> ${env.NEXUS_REPOSITORY}</li>
                <li><strong>Version:</strong> ${env.PYTHON_PACKAGE_VERSION}</li>
            </ul>
        </div>
        
        <p>Consultez les rapports détaillés dans Jenkins pour plus d'informations.</p>
    </div>
    
    <footer>
        <p>© ${new Date().format("yyyy")} - Système de notification Jenkins</p>
    </footer>
</body>
</html>
"""
                
                emailext (
                    subject: "Build ${BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailTemplate,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
        
        success {
            echo "Build réussi! ✅"
        }
        
        failure {
            echo "Build échoué! ❌"
        }
        
        unstable {
            echo "Build instable! ⚠️"
        }
    }
}