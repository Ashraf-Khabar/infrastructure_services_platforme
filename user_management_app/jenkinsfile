pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"

        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'

        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
        PROMETHEUS_PUSH_GATEWAY = 'http://prometheus.host.internal'

        PYTHON_PACKAGE_VERSION = 'N/A'
        
        AWS_REGION = 'us-east-1'
        AWS_ECR_REGISTRY = '036386574460.dkr.ecr.us-east-1.amazonaws.com'
        ECR_API_REPOSITORY = 'user-management-api'
        ECR_CLIENT_REPOSITORY = 'user-management-client'
        ECS_CLUSTER = 'user-management-cluster'
        ECS_SERVICE = 'user-management-service'
        AWS_CREDENTIALS_ID = 'aws-credentials'
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl docker.io
                    python3 -m venv ${VENV_PATH}
                    ${VENV_PATH}/bin/pip install --upgrade pip
                    
                    echo "=== VERSIONS DES OUTILS ==="
                    echo "Python: $(python3 --version)"
                    echo "Pip: $(${VENV_PATH}/bin/pip --version)"
                    echo "AWS CLI: $(aws --version 2>&1)"
                    echo "Docker: $(docker --version)"
                    echo "==========================="
                '''
            }
        }

        stage('Check AWS Configuration') {
            steps {
                script {
                    echo "Checking AWS configuration..."
                    try {
                        withCredentials([[
                            $class: 'UsernamePasswordMultiBinding',
                            credentialsId: env.AWS_CREDENTIALS_ID,
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            echo "AWS credentials found successfully"
                            sh 'echo "true" > /tmp/aws_credentials_available'
                        }
                    } catch (Exception e) {
                        echo "WARNING: AWS credentials not found"
                        sh 'echo "false" > /tmp/aws_credentials_available'
                    }
                }
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/api/requirements.txt" 
                    }
                }
                stage('Client Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install -r ${APP_DIR}/client/requirements.txt" 
                    }
                }
                stage('Test Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install pytest requests" 
                    }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install robotframework
                            ${VENV_PATH}/bin/pip install robotframework-requests
                            ${VENV_PATH}/bin/pip install robotframework-databaselibrary
                            ${VENV_PATH}/bin/pip install psycopg2-binary
                        """
                    }
                }
                stage('Prometheus Dependencies') {
                    steps { 
                        sh "${VENV_PATH}/bin/pip install prometheus-client" 
                    }
                }
                stage('AWS Dependencies') {
                    steps {
                        sh """
                            ${VENV_PATH}/bin/pip install boto3
                        """
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server"
                    sh """
                        cd ${APP_DIR}/api
                        nohup ${VENV_PATH}/bin/python app.py > /dev/null 2>&1 &
                        echo \$! > ${API_PID_FILE}
                        sleep 3
                    """

                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh """
                                    curl -s -f http://localhost:5000/health > /dev/null && \
                                    curl -s -f http://localhost:5000/ > /dev/null
                                """
                                echo "API is ready and responding!"
                                return true
                            } catch (Exception e) {
                                echo "API not ready yet, waiting..."
                                sleep 5
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps { 
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_api.py -v --tb=short" 
                    }
                }
                stage('Model Tests') {
                    steps { 
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_models.py -v --tb=short" 
                    }
                }
                stage('Unit Tests') {
                    steps { 
                        sh "${VENV_PATH}/bin/python -m pytest ${APP_DIR}/tests/test_unit.py -v --tb=short" 
                    }
                }
                stage('Robot Framework Tests') {
                    steps {
                        script {
                            sh """
                                mkdir -p ${ROBOT_REPORTS_DIR}
                                cd ${APP_DIR}/robot_tests
                                set +e
                                ${VENV_PATH}/bin/robot \
                                    --outputdir ${ROBOT_REPORTS_DIR} \
                                    --output output.xml \
                                    --report report.html \
                                    --log log.html \
                                    --xunit xunit.xml \
                                    . || echo "Robot Framework tests finished with failures"
                                set -e
                            """
                        }
                    }
                    post {
                        always {
                            script {
                                def outputFile = "${ROBOT_REPORTS_DIR}/output.xml"
                                if (fileExists(outputFile)) {
                                    robot outputPath: "${ROBOT_REPORTS_DIR}",
                                          outputFileName: "output.xml",
                                          reportFileName: "report.html",
                                          logFileName: "log.html",
                                          disableArchiveOutput: true,
                                          passThreshold: 70.0,
                                          unstableThreshold: 50.0
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Push Metrics to Prometheus') {
            steps {
                script {
                    echo "Pushing metrics to Prometheus"
                    def metrics = """
# HELP jenkins_custom_build_info Build information
# TYPE jenkins_custom_build_info gauge
jenkins_custom_build_info{job="${env.JOB_NAME}", build_number="${env.BUILD_NUMBER}", result="${currentBuild.currentResult}"} 1

# HELP jenkins_custom_build_duration_seconds Build duration in seconds
# TYPE jenkins_custom_build_duration_seconds gauge
jenkins_custom_build_duration_seconds{job="${env.JOB_NAME}"} ${currentBuild.duration / 1000}
"""
                    try {
                        sh """
                            echo '${metrics}' | curl --connect-timeout 5 --max-time 10 -X POST --data-binary @- ${PROMETHEUS_PUSH_GATEWAY}/metrics/job/jenkins/instance/${env.JOB_NAME} || echo "Prometheus push failed"
                        """
                        echo "Metrics pushed to Prometheus successfully"
                    } catch (Exception e) {
                        echo "Failed to push metrics to Prometheus"
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server"
                    sh """
                        if [ -f ${API_PID_FILE} ]; then
                            PID=\$(cat ${API_PID_FILE})
                            echo "Stopping API process: \$PID"
                            kill \$PID 2>/dev/null || true
                            sleep 2
                            kill -9 \$PID 2>/dev/null || true
                            rm -f ${API_PID_FILE}
                            echo "API server stopped"
                        else
                            echo "No API PID file found, stopping any python app processes"
                            pkill -f "python.*app\\.py" 2>/dev/null || true
                        fi
                    """
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package"
                    sh '${VENV_PATH}/bin/pip install setuptools wheel'
                    sh """
                        cd ${APP_DIR}
                        ${VENV_PATH}/bin/python setup.py sdist bdist_wheel
                    """
                    sh "ls -la ${APP_DIR}/dist/"
                    
                    def packageVersion = sh(
                        script: "${VENV_PATH}/bin/python -c \"import setuptools; setup = setuptools.setup(); print(setup.get('version', 'N/A'))\" 2>/dev/null || echo 'N/A'",
                        returnStdout: true
                    ).trim()
                    env.PYTHON_PACKAGE_VERSION = packageVersion
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype"
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh """
                            cd ${APP_DIR}
                            ${VENV_PATH}/bin/pip install twine
                            ${VENV_PATH}/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u ${NEXUS_USER} -p ${NEXUS_PASSWORD} \
                                dist/* || echo "Nexus upload failed"
                        """
                    }
                }
            }
        }

        stage('Verify ECR Access') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            echo "=== ECR REPOSITORIES ==="
                            aws ecr describe-repositories --region ${AWS_REGION}
                            
                            echo "=== CURRENT IMAGES ==="
                            aws ecr list-images --repository-name ${ECR_API_REPOSITORY} --region ${AWS_REGION}
                            aws ecr list-images --repository-name ${ECR_CLIENT_REPOSITORY} --region ${AWS_REGION}
                        """
                    }
                }
            }
        }

        stage('Create ECR Repositories') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            if ! aws ecr describe-repositories --repository-names ${ECR_API_REPOSITORY} >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${ECR_API_REPOSITORY}"
                                aws ecr create-repository --repository-name ${ECR_API_REPOSITORY}
                            else
                                echo "ECR repository already exists: ${ECR_API_REPOSITORY}"
                            fi
                            
                            if ! aws ecr describe-repositories --repository-names ${ECR_CLIENT_REPOSITORY} >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${ECR_CLIENT_REPOSITORY}"
                                aws ecr create-repository --repository-name ${ECR_CLIENT_REPOSitORY}
                            else
                                echo "ECR repository already exists: ${ECR_CLIENT_REPOSITORY}"
                            fi
                        """
                    }
                }
            }
        }

        stage('Build Docker Images') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Building Docker images for AWS ECR"
                    sh """
                        cd ${APP_DIR}/api
                        docker build -t ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${env.BUILD_NUMBER} .
                        docker tag ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${env.BUILD_NUMBER} ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest
                    """
                    sh """
                        cd ${APP_DIR}/client
                        docker build -t ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${env.BUILD_NUMBER} .
                        docker tag ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${env.BUILD_NUMBER} ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest
                    """
                }
            }
        }

        stage('Push to AWS ECR') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Pushing Docker images to AWS ECR"
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            ECR_PASSWORD=\$(aws ecr get-login-password --region ${AWS_REGION})
                            echo "\$ECR_PASSWORD" | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY}
                            
                            echo "Pushing API image..."
                            docker push ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest
                            
                            echo "Pushing Client image..."
                            docker push ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest
                            
                            echo "All images pushed successfully to ECR"
                        """
                    }
                }
            }
        }

        stage('Verify ECS Cluster') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            echo "=== CHECKING ECS CLUSTER ==="
                            aws ecs describe-clusters --clusters ${ECS_CLUSTER} --region ${AWS_REGION} || echo "Cluster does not exist"
                        """
                    }
                }
            }
        }

        stage('Create ECS Service if Needed') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            if ! aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} >/dev/null 2>&1; then
                                echo "Service ${ECS_SERVICE} does not exist. You need to create it first."
                            else
                                echo "ECS service exists: ${ECS_SERVICE}"
                            fi
                        """
                    }
                }
            }
        }

        stage('Deploy to AWS ECS') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            if ! aws ecs describe-clusters --clusters ${ECS_CLUSTER} --region ${AWS_REGION} >/dev/null 2>&1; then
                                echo "Creating ECS cluster: ${ECS_CLUSTER}"
                                aws ecs create-cluster --cluster-name ${ECS_CLUSTER} --region ${AWS_REGION}
                                sleep 10
                            else
                                echo "ECS cluster already exists: ${ECS_CLUSTER}"
                            fi
                            
                            echo "Initiating ECS deployment..."
                            aws ecs update-service \
                                --cluster ${ECS_CLUSTER} \
                                --service ${ECS_SERVICE} \
                                --force-new-deployment \
                                --region ${AWS_REGION}
                            
                            echo "ECS deployment initiated successfully"
                        """
                    }
                }
            }
        }

        stage('Verify AWS Deployment') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws configure set aws_access_key_id "\$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "\$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            albDns=\$(aws elbv2 describe-load-balancers --region ${AWS_REGION} --query 'LoadBalancers[?contains(LoadBalancerName, \\`user-management\\`)].DNSName' --output text 2>/dev/null || echo "NOT_FOUND")
                            
                            if [ "\$albDns" != "NOT_FOUND" ] && [ ! -z "\$albDns" ]; then
                                echo "Application Load Balancer DNS: \$albDns"
                                echo "Testing application endpoints..."
                                curl -s -f http://\${albDns}:5000/health && echo "✓ Health check passed" || echo "✗ Health check failed"
                                curl -s http://\${albDns}:5000/ | head -n 3 || echo "✗ Main endpoint failed"
                            else
                                echo "ALB DNS not found. Deployment might still be in progress."
                            fi
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                env.BUILD_STATUS = currentBuild.currentResult
                def awsStatus = sh(script: 'cat /tmp/aws_credentials_available 2>/dev/null || echo "false"', returnStdout: true).trim()
                def awsDeploymentStatus = (awsStatus == 'true') ? 'COMPLETED' : 'SKIPPED (No AWS credentials)'
                
                sh """
                    echo "Cleaning up processes and resources"
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                    
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${env.BUILD_NUMBER} 2>/dev/null || true
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${env.BUILD_NUMBER} 2>/dev/null || true
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest 2>/dev/null || true
                    docker rmi ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest 2>/dev/null || true
                    
                    rm -f /tmp/aws_credentials_available 2>/dev/null || true
                    echo "Cleanup completed"
                """

                def statusColor
                if (env.BUILD_STATUS == 'SUCCESS') {
                    statusColor = '#28a745'
                } else if (env.BUILD_STATUS == 'UNSTABLE') {
                    statusColor = '#ffc107' 
                } else {
                    statusColor = '#dc3545'
                }

                def emailTemplate = readFile(file: env.EMAIL_TEMPLATE_PATH)

                def emailBody = emailTemplate
                    .replace('${STATUS_COLOR}', statusColor)
                    .replace('${BUILD_STATUS}', env.BUILD_STATUS ?: 'UNKNOWN')
                    .replace('${JOB_NAME}', env.JOB_NAME ?: 'UNKNOWN')
                    .replace('${BUILD_NUMBER}', env.BUILD_NUMBER ?: '0')
                    .replace('${BUILD_DURATION}', currentBuild.durationString ?: '0s')
                    .replace('${NEXUS_URL}', env.NEXUS_URL ?: 'N/A')
                    .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY ?: 'N/A')
                    .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION ?: 'N/A')
                    .replace('${BUILD_URL}', env.BUILD_URL ?: 'N/A')
                    .replace('${AWS_REGION}', env.AWS_REGION ?: 'N/A')
                    .replace('${ECS_CLUSTER}', env.ECS_CLUSTER ?: 'N/A')
                    .replace('${AWS_DEPLOYMENT_STATUS}', awsDeploymentStatus)
                    .replace('${CURRENT_YEAR}', new Date().format("yyyy"))

                emailext (
                    subject: "Build ${env.BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
        
        success {
            script {
                echo "Build completed successfully!"
                def awsStatus = sh(script: 'cat /tmp/aws_credentials_available 2>/dev/null || echo "false"', returnStdout: true).trim()
                if (awsStatus == 'true') {
                    echo "- AWS ECR: ${env.AWS_ECR_REGISTRY}"
                    echo "- AWS ECS: ${env.ECS_CLUSTER}/${env.ECS_SERVICE}"
                }
            }
        }
        
        failure {
            echo "Build failed! Check logs for details."
        }
        
        unstable {
            echo "Build unstable! Some tests may have failed."
        }
    }
}