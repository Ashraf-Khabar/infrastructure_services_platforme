pipeline {
    agent {
        label 'python_slave_agent'
    }

    environment {
        VENV_PATH = "${WORKSPACE}/venv"
        APP_DIR = "${WORKSPACE}/user_management_app"
        API_PID_FILE = "/tmp/api.pid"
        EMAIL_RECIPIENTS = 'khabarachraf@gmail.com'
        BUILD_STATUS = "UNKNOWN"
        EMAIL_TEMPLATE_PATH = "${WORKSPACE}/internal_apps_monitoring/mail/email-template.html"

        NEXUS_URL = 'http://nexus.host.internal'
        NEXUS_REPOSITORY = 'user_management_app'
        NEXUS_CREDENTIALS_ID = 'JENKINS_TOKEN'

        ROBOT_REPORTS_DIR = "${WORKSPACE}/robot_reports"
        PROMETHEUS_PUSH_GATEWAY = 'http://prometheus.host.internal'

        PYTHON_PACKAGE_VERSION = 'N/A'
        
        AWS_REGION = 'us-east-1'
        AWS_ECR_REGISTRY = '036386574460.dkr.ecr.us-east-1.amazonaws.com'
        ECR_API_REPOSITORY = 'user-management-api'
        ECR_CLIENT_REPOSITORY = 'user-management-client'
        ECS_CLUSTER = 'user-management-cluster'
        ECS_SERVICE = 'user-management-service'
        ECS_TASK_DEFINITION = 'user-management-task'
        AWS_CREDENTIALS_ID = 'aws-credentials'
        
        SUBNET_IDS = 'subnet-07c7753f7a3e568fe,subnet-0855ecf8e69a20c39,subnet-0e49091aac1b8dc12'
        SECURITY_GROUP_ID = 'sg-0d0b46466c78a871e'
        
        DB_INSTANCE_IDENTIFIER = 'user-management-db'
        DB_NAME = 'user_management'
        DB_USERNAME = 'appuser'
        DB_PASSWORD = 'apppassword'
        DB_INSTANCE_CLASS = 'db.t3.micro'
        DB_ENGINE = 'postgres'
        DB_ENGINE_VERSION = '15.4'
        DB_STORAGE = '20'
        
        FLASK_ENV = 'production'
        FLASK_DEBUG = '0'
        REACT_APP_API_URL = 'http://localhost:5000'
        HOST = '0.0.0.0'
        PORT = '5000'
        CLIENT_PORT = '3000'
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh '''
                    sudo apt update -y
                    sudo apt install -y python3 python3-pip python3-venv curl docker.io jq postgresql-client
                    python3 -m venv $VENV_PATH
                    $VENV_PATH/bin/pip install --upgrade pip
                    
                    echo "=== VERSIONS DES OUTILS ==="
                    echo "Python: $(python3 --version)"
                    echo "Pip: $($VENV_PATH/bin/pip --version)"
                    echo "AWS CLI: $(aws --version 2>&1)"
                    echo "Docker: $(docker --version)"
                    echo "jq: $(jq --version)"
                    echo "psql: $(psql --version)"
                    echo "==========================="
                '''
            }
        }

        stage('Check AWS Configuration') {
            steps {
                script {
                    echo "Checking AWS configuration..."
                    try {
                        withCredentials([[
                            $class: 'UsernamePasswordMultiBinding',
                            credentialsId: env.AWS_CREDENTIALS_ID,
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            echo "AWS credentials found successfully"
                            sh 'echo "true" > /tmp/aws_credentials_available'
                        }
                    } catch (Exception e) {
                        echo "WARNING: AWS credentials not found"
                        sh 'echo "false" > /tmp/aws_credentials_available'
                    }
                }
            }
        }

        stage('Fix Python 3.13 Compatibility') {
            steps {
                script {
                    echo "Fixing Python 3.13 compatibility issues for pydantic..."
                    
                    sh '''
                        $VENV_PATH/bin/pip install --only-binary pydantic-core "pydantic-core>=2.14.0" || \
                        echo "Pre-built pydantic-core not available, will try pydantic 1.x"
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('API Dependencies') {
                    steps { 
                        script {
                            echo "Installing API dependencies with Python 3.13 compatibility"
                            
                            sh '''
                                $VENV_PATH/bin/pip install "pydantic-core>=2.14.0" "pydantic>=2.5.0"
                                $VENV_PATH/bin/pip install "fastapi>=0.104.0" "uvicorn[standard]>=0.24.0"
                            '''

                            sh '''
                                $VENV_PATH/bin/pip install -r $APP_DIR/api/requirements.txt --no-deps || \
                                echo "Some dependencies may have issues, continuing with individual installation..."
                            '''

                            sh '''
                                $VENV_PATH/bin/pip install "sqlalchemy>=2.0.0" \
                                    "psycopg2-binary>=2.9.0" \
                                    "alembic>=1.0.0" \
                                    "python-multipart>=0.0.0" \
                                    "python-jose>=3.0.0" \
                                    "passlib>=1.7.0"
                            '''

                            sh '''
                                echo "=== VERIFYING CRITICAL PACKAGES ==="
                                $VENV_PATH/bin/python -c "import pydantic; print('Pydantic:', pydantic.VERSION)"
                                $VENV_PATH/bin/python -c "import fastapi; print('FastAPI:', fastapi.__version__)"
                                $VENV_PATH/bin/python -c "import sqlalchemy; print('SQLAlchemy:', sqlalchemy.__version__)"
                                $VENV_PATH/bin/python -c "import psycopg2; print('psycopg2:', psycopg2.__version__)"
                                echo "Python version: $($VENV_PATH/bin/python --version)"
                            '''
                        }
                    }
                }
                stage('Client Dependencies') {
                    steps { 
                        sh '$VENV_PATH/bin/pip install -r $APP_DIR/client/requirements.txt'
                    }
                }
                stage('Test Dependencies') {
                    steps { 
                        sh '$VENV_PATH/bin/pip install pytest requests'
                    }
                }
                stage('Robot Framework Dependencies') {
                    steps {
                        sh '''
                            $VENV_PATH/bin/pip install robotframework
                            $VENV_PATH/bin/pip install robotframework-requests
                            $VENV_PATH/bin/pip install robotframework-databaselibrary
                            $VENV_PATH/bin/pip install psycopg2-binary
                        '''
                    }
                }
                stage('Prometheus Dependencies') {
                    steps { 
                        sh '$VENV_PATH/bin/pip install prometheus-client'
                    }
                }
                stage('AWS Dependencies') {
                    steps {
                        sh '''
                            $VENV_PATH/bin/pip install boto3
                        '''
                    }
                }
            }
        }

        stage('Start API Server') {
            steps {
                script {
                    echo "Starting API server"
                    sh '''
                        cd $APP_DIR/api
                        nohup $VENV_PATH/bin/python app.py > /dev/null 2>&1 &
                        echo $! > $API_PID_FILE
                        sleep 3
                    '''

                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            try {
                                sh '''
                                    curl -s -f http://localhost:5000/health > /dev/null && \
                                    curl -s -f http://localhost:5000/ > /dev/null
                                '''
                                echo "API is ready and responding!"
                                return true
                            } catch (Exception e) {
                                echo "API not ready yet, waiting..."
                                sleep 5
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Execute Tests') {
            parallel {
                stage('API Tests') {
                    steps { 
                        sh '$VENV_PATH/bin/python -m pytest $APP_DIR/tests/test_api.py -v --tb=short'
                    }
                }
                stage('Model Tests') {
                    steps { 
                        sh '$VENV_PATH/bin/python -m pytest $APP_DIR/tests/test_models.py -v --tb=short'
                    }
                }
                stage('Unit Tests') {
                    steps { 
                        sh '$VENV_PATH/bin/python -m pytest $APP_DIR/tests/test_unit.py -v --tb=short'
                    }
                }
                stage('Robot Framework Tests') {
                    steps {
                        script {
                            sh '''
                                mkdir -p $ROBOT_REPORTS_DIR
                                cd $APP_DIR/robot_tests
                                set +e
                                $VENV_PATH/bin/robot \
                                    --outputdir $ROBOT_REPORTS_DIR \
                                    --output output.xml \
                                    --report report.html \
                                    --log log.html \
                                    --xunit xunit.xml \
                                    . || echo "Robot Framework tests finished with failures"
                                set -e
                            '''
                        }
                    }
                    post {
                        always {
                            script {
                                def outputFile = "${ROBOT_REPORTS_DIR}/output.xml"
                                if (fileExists(outputFile)) {
                                    robot outputPath: "${ROBOT_REPORTS_DIR}",
                                          outputFileName: "output.xml",
                                          reportFileName: "report.html",
                                          logFileName: "log.html",
                                          disableArchiveOutput: true,
                                          passThreshold: 70.0,
                                          unstableThreshold: 50.0
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Push Metrics to Prometheus') {
            steps {
                script {
                    echo "Pushing metrics to Prometheus"
                    def metrics = """
                        # HELP jenkins_custom_build_info Build information
                        # TYPE jenkins_custom_build_info gauge
                        jenkins_custom_build_info{job="${env.JOB_NAME}", build_number="${env.BUILD_NUMBER}", result="${currentBuild.currentResult}"} 1

                        # HELP jenkins_custom_build_duration_seconds Build duration in seconds
                        # TYPE jenkins_custom_build_duration_seconds gauge
                        jenkins_custom_build_duration_seconds{job="${env.JOB_NAME}"} ${currentBuild.duration / 1000}
                    """
                    try {
                        sh """
                            echo '${metrics}' | curl --connect-timeout 5 --max-time 10 -X POST --data-binary @- ${PROMETHEUS_PUSH_GATEWAY}/metrics/job/jenkins/instance/${env.JOB_NAME} || echo "Prometheus push failed"
                        """
                        echo "Metrics pushed to Prometheus successfully"
                    } catch (Exception e) {
                        echo "Failed to push metrics to Prometheus"
                    }
                }
            }
        }

        stage('Stop API Server') {
            steps {
                script {
                    echo "Stopping API server"
                    sh '''
                        if [ -f $API_PID_FILE ]; then
                            PID=$(cat $API_PID_FILE)
                            echo "Stopping API process: $PID"
                            kill $PID 2>/dev/null || true
                            sleep 2
                            kill -9 $PID 2>/dev/null || true
                            rm -f $API_PID_FILE
                            echo "API server stopped"
                        else
                            echo "No API PID file found, stopping any python app processes"
                            pkill -f "python.*app\\.py" 2>/dev/null || true
                        fi
                    '''
                }
            }
        }

        stage('Build Python Package') {
            steps {
                script {
                    echo "Building Python package"
                    sh '$VENV_PATH/bin/pip install setuptools wheel'
                    sh '''
                        cd $APP_DIR
                        $VENV_PATH/bin/python setup.py sdist bdist_wheel
                    '''
                    sh "ls -la $APP_DIR/dist/"
                    
                    def packageVersion = sh(
                        script: "$VENV_PATH/bin/python -c \"import setuptools; setup = setuptools.setup(); print(setup.get('version', 'N/A'))\" 2>/dev/null || echo 'N/A'",
                        returnStdout: true
                    ).trim()
                    env.PYTHON_PACKAGE_VERSION = packageVersion
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus Sonatype"
                    withCredentials([usernamePassword(
                        credentialsId: env.NEXUS_CREDENTIALS_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASSWORD'
                    )]) {
                        sh '''
                            cd $APP_DIR
                            $VENV_PATH/bin/pip install twine
                            $VENV_PATH/bin/twine upload \
                                --repository-url ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/ \
                                -u $NEXUS_USER -p $NEXUS_PASSWORD \
                                dist/* || echo "Nexus upload failed"
                        '''
                    }
                }
            }
        }

        stage('Verify ECR Access') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            echo "=== ECR REPOSITORIES ==="
                            aws ecr describe-repositories --region ${AWS_REGION}
                            
                            echo "=== CURRENT IMAGES ==="
                            aws ecr list-images --repository-name ${ECR_API_REPOSITORY} --region ${AWS_REGION}
                            aws ecr list-images --repository-name ${ECR_CLIENT_REPOSITORY} --region ${AWS_REGION}
                        '''
                    }
                }
            }
        }

        stage('Create ECR Repositories') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            if ! aws ecr describe-repositories --repository-names ${ECR_API_REPOSITORY} >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${ECR_API_REPOSITORY}"
                                aws ecr create-repository --repository-name ${ECR_API_REPOSITORY}
                            else
                                echo "ECR repository already exists: ${ECR_API_REPOSITORY}"
                            fi
                            
                            if ! aws ecr describe-repositories --repository-names ${ECR_CLIENT_REPOSITORY} >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${ECR_CLIENT_REPOSITORY}"
                                aws ecr create-repository --repository-name ${ECR_CLIENT_REPOSITORY}
                            else
                                echo "ECR repository already exists: ${ECR_CLIENT_REPOSITORY}"
                            fi
                        '''
                    }
                }
            }
        }

        stage('Build Docker Images') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }

            steps {
                script {
                    echo "Building Docker images for AWS ECR"

                    sh '''
                        cd $APP_DIR/api
                        # Create corrected Dockerfile
                        cat > Dockerfile.ecr << 'EOF'
                        FROM python:3.11-slim

                        WORKDIR /app

                        # Install system dependencies for psycopg2 and build essentials
                        RUN apt-get update && apt-get install -y \\
                            gcc \\
                            libpq-dev \\
                            && rm -rf /var/lib/apt/lists/*

                        # Copy requirements first to leverage Docker cache
                        COPY requirements.txt .

                        # Install Python dependencies
                        RUN pip install --no-cache-dir --upgrade pip && \\
                            pip install --no-cache-dir -r requirements.txt

                        # Copy application code
                        COPY . .

                        # Expose the port
                        EXPOSE 5000

                        # Command to run the application with Gunicorn
                        CMD ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:5000", "app:app"]
                        EOF
                        
                        docker build -f Dockerfile.ecr -t ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${BUILD_NUMBER} .
                        docker tag ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${BUILD_NUMBER} ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest
                        
                        # Verify the image exists
                        docker images | grep ${ECR_API_REPOSITORY}
                        
                        rm Dockerfile.ecr
                    '''

                    sh '''
                        cd $APP_DIR/client
                        # Create corrected Dockerfile
                        cat > Dockerfile.ecr << 'EOF'
                        FROM python:3.9-slim

                        WORKDIR /app

                        # Install system dependencies
                        RUN apt-get update && apt-get install -y \\
                            gunicorn \\
                            && rm -rf /var/lib/apt/lists/*

                        # Copy requirements first
                        COPY requirements.txt .

                        # Install Python dependencies
                        RUN pip install --no-cache-dir --upgrade pip && \\
                            pip install --no-cache-dir -r requirements.txt

                        # Copy application code
                        COPY . .

                        # Expose the port
                        EXPOSE 3000

                        # Command to run the application
                        CMD ["gunicorn", "-w", "4", "--bind", "0.0.0.0:3000", "app:app"]
                        EOF
                        
                        docker build -f Dockerfile.ecr -t ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${BUILD_NUMBER} .
                        docker tag ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${BUILD_NUMBER} ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest
                        
                        # Verify the image exists
                        docker images | grep ${ECR_CLIENT_REPOSITORY}
                        
                        rm Dockerfile.ecr
                    '''
                }
            }
        }

        stage('Check Network Connectivity') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Checking network connectivity to ECR"
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            # Test ECR connectivity
                            echo "Testing ECR connectivity..."
                            timeout 30 aws ecr describe-repositories --region ${AWS_REGION} >/dev/null && \
                            echo "ECR connectivity test passed" || \
                            echo "ECR connectivity test failed"
                            
                            # Test network connectivity
                            echo "Testing network connectivity to ECR endpoint..."
                            ECR_HOST=$(echo ${AWS_ECR_REGISTRY} | cut -d'/' -f1)
                            timeout 30 curl -I https://${ECR_HOST} >/dev/null && \
                            echo "Network connectivity test passed" || \
                            echo "Network connectivity test failed"
                        '''
                    }
                }
            }
        }

        stage('Push to AWS ECR') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Pushing Docker images to AWS ECR (with retry logic)"
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            # Get ECR login password
                            ECR_PASSWORD=$(aws ecr get-login-password --region ${AWS_REGION})
                            echo "$ECR_PASSWORD" | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY}
                            
                            # Set longer timeouts
                            export DOCKER_CLIENT_TIMEOUT=120
                            export COMPOSE_HTTP_TIMEOUT=120
                            
                            echo "=== VERIFYING LOCAL IMAGES ==="
                            docker images
                            
                            # Function to push with retries
                            push_with_retry() {
                                local image=$1
                                local max_attempts=3
                                local attempt=1
                                local wait_time=10
                                
                                while [ $attempt -le $max_attempts ]; do
                                    echo "Attempt $attempt to push $image"
                                    if docker push $image; then
                                        echo "Successfully pushed $image"
                                        return 0
                                    else
                                        echo "Attempt $attempt failed, waiting $wait_time seconds before retry..."
                                        sleep $wait_time
                                        attempt=$((attempt + 1))
                                        wait_time=$((wait_time * 2)) # Exponential backoff
                                    fi
                                done
                                echo "All $max_attempts attempts failed for $image"
                                return 1
                            }
                            
                            echo "Pushing API image version ${BUILD_NUMBER}..."
                            push_with_retry ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:${BUILD_NUMBER}
                            
                            echo "Pushing API latest image..."
                            push_with_retry ${AWS_ECR_REGISTRY}/${ECR_API_REPOSITORY}:latest
                            
                            echo "Pushing Client image version ${BUILD_NUMBER}..."
                            push_with_retry ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:${BUILD_NUMBER}
                            
                            echo "Pushing Client latest image..."
                            push_with_retry ${AWS_ECR_REGISTRY}/${ECR_CLIENT_REPOSITORY}:latest
                            
                            echo "All images pushed successfully to ECR"
                            
                            echo "=== VERIFYING ECR IMAGES ==="
                            aws ecr list-images --repository-name ${ECR_API_REPOSITORY} --region ${AWS_REGION}
                            aws ecr list-images --repository-name ${ECR_CLIENT_REPOSITORY} --region ${AWS_REGION}
                        '''
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            when {
                expression { 
                    def status = sh(script: 'cat /tmp/aws_credentials_available', returnStdout: true).trim()
                    return status == 'true' 
                }
            }
            steps {
                script {
                    echo "Deploying to AWS ECS"
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
                            aws configure set region ${AWS_REGION}
                            
                            # Check if service exists and is active
                            SERVICE_STATUS=$(aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION} \
                                --query "services[0].status" \
                                --output text 2>/dev/null || echo "NOT_EXIST")
                            
                            if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
                                echo "Updating existing ECS service..."
                                aws ecs update-service \
                                    --cluster ${ECS_CLUSTER} \
                                    --service ${ECS_SERVICE} \
                                    --force-new-deployment \
                                    --region ${AWS_REGION}
                                
                            elif [ "$SERVICE_STATUS" = "NOT_EXIST" ] || [ "$SERVICE_STATUS" = "INACTIVE" ]; then
                                echo "Service does not exist or is inactive. Creating new service..."
                                
                                # Check if task definition exists
                                TASK_DEFINITION_STATUS=$(aws ecs describe-task-definition \
                                    --task-definition ${ECS_TASK_DEFINITION} \
                                    --region ${AWS_REGION} \
                                    --query "taskDefinition.status" \
                                    --output text 2>/dev/null || echo "NOT_EXIST")
                                
                                if [ "$TASK_DEFINITION_STATUS" = "NOT_EXIST" ]; then
                                    echo "ERROR: Task definition ${ECS_TASK_DINITION} does not exist"
                                    exit 1
                                fi
                                
                                # Create the service with desired count 1
                                aws ecs create-service \
                                    --cluster ${ECS_CLUSTER} \
                                    --service-name ${ECS_SERVICE} \
                                    --task-definition ${ECS_TASK_DEFINITION} \
                                    --desired-count 1 \
                                    --launch-type FARGATE \
                                    --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
                                    --region ${AWS_REGION}
                                    
                            else
                                echo "Service status: $SERVICE_STATUS - cannot deploy"
                                exit 1
                            fi
                            
                            echo "Waiting for service to stabilize (with timeout)..."
                            # Wait with timeout and better error handling
                            timeout 300 aws ecs wait services-stable \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION} || \
                            echo "Service stabilization timeout or failed - checking status..."
                            
                            # Get detailed service status for debugging
                            echo "=== SERVICE DETAILS ==="
                            aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION}
                            
                            # Check tasks status for debugging
                            echo "=== RUNNING TASKS ==="
                            aws ecs list-tasks \
                                --cluster ${ECS_CLUSTER} \
                                --service-name ${ECS_SERVICE} \
                                --region ${AWS_REGION}
                            
                            # If tasks exist, get their status
                            TASK_ARNS=$(aws ecs list-tasks \
                                --cluster ${ECS_CLUSTER} \
                                --service-name ${ECS_SERVICE} \
                                --region ${AWS_REGION} \
                                --query "taskArns" \
                                --output text)
                            
                            if [ ! -z "$TASK_ARNS" ] && [ "$TASK_ARNS" != "None" ]; then
                                echo "=== TASKS DETAILS ==="
                                aws ecs describe-tasks \
                                    --cluster ${ECS_CLUSTER} \
                                    --tasks $TASK_ARNS \
                                    --region ${AWS_REGION} \
                                    --query "tasks[].{arn:taskArn,lastStatus:lastStatus,healthStatus:healthStatus,stoppedReason:stoppedReason}"
                                    
                                # Get task logs for debugging
                                for task_arn in $TASK_ARNS; do
                                    echo "=== LOGS FOR TASK $task_arn ==="
                                    # Get the task definition to find cloudwatch log group
                                    TASK_DEFINITION_ARN=$(aws ecs describe-tasks \
                                        --cluster ${ECS_CLUSTER} \
                                        --tasks $task_arn \
                                        --region ${AWS_REGION} \
                                        --query "tasks[0].taskDefinitionArn" \
                                        --output text)
                                        
                                    # Try to get logs from CloudWatch if configured
                                    aws logs describe-log-streams \
                                        --log-group-name "/ecs/${ECS_TASK_DEFINITION}" \
                                        --region ${AWS_REGION} \
                                        --query "logStreams[0].logStreamName" \
                                        --output text | xargs -I {} aws logs get-log-events \
                                        --log-group-name "/ecs/${ECS_TASK_DEFINITION}" \
                                        --log-stream-name {} \
                                        --region ${AWS_REGION} || echo "No CloudWatch logs available"
                                done
                            fi
                            
                            # Get the public DNS of the load balancer
                            echo "Getting application URL..."
                            ALB_DNS=$(aws elbv2 describe-load-balancers \
                                --names user-management-alb \
                                --region ${AWS_REGION} \
                                --query "LoadBalancers[0].DNSName" \
                                --output text) || echo "ALB not found"
                            
                            if [ ! -z "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
                                echo "Application URL: http://$ALB_DNS" > ${WORKSPACE}/app_url.txt
                                echo "Application deployed successfully: http://$ALB_DNS"
                            else
                                echo "ALB not found, checking for any load balancer..."
                                # Try to find any ALB associated with the cluster
                                ALB_DNS=$(aws elbv2 describe-load-balancers \
                                    --region ${AWS_REGION} \
                                    --query "LoadBalancers[?contains(LoadBalancerName, 'user-management')].DNSName" \
                                    --output text | head -n 1) || echo "No ALB found"
                                
                                if [ ! -z "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
                                    echo "Application URL: http://$ALB_DNS" > ${WORKSPACE}/app_url.txt
                                    echo "Application deployed successfully: http://$ALB_DNS"
                                else
                                    echo "ALB not found, application URL not available" > ${WORKSPACE}/app_url.txt
                                    echo "Application deployed but ALB not found"
                                fi
                            fi
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                env.BUILD_STATUS = currentBuild.currentResult
                def awsStatus = sh(script: 'cat /tmp/aws_credentials_available 2>/dev/null || echo "false"', returnStdout: true).trim()
                def awsDeploymentStatus = (awsStatus == 'true') ? 'COMPLETED' : 'SKIPPED (No AWS credentials)'
                
                def appUrl = "Not available"
                try {
                    if (fileExists("${WORKSPACE}/app_url.txt")) {
                        appUrl = readFile(file: "${WORKSPACE}/app_url.txt").trim()
                    } else {
                        appUrl = "Not available (ECS deployment not configured)"
                    }
                } catch (Exception e) {
                    appUrl = "Not available (Error reading file)"
                }
                
                sh """
                    echo "Cleaning up processes and resources"
                    if [ -f ${API_PID_FILE} ]; then
                        PID=\$(cat ${API_PID_FILE})
                        kill \$PID 2>/dev/null || true
                        rm -f ${API_PID_FILE}
                    fi
                    pkill -f "python.*app\\.py" 2>/dev/null || true
                    pkill -f "uvicorn" 2>/dev/null || true
                    
                    rm -f /tmp/aws_credentials_available 2>/dev/null || true
                    rm -f task-definition.json 2>/dev/null || true
                    rm -f ${WORKSPACE}/app_url.txt 2>/dev/null || true
                    rm -f ${WORKSPACE}/database_url.txt 2>/dev/null || true
                    echo "Cleanup completed"
                """

                def statusColor
                if (env.BUILD_STATUS == 'SUCCESS') {
                    statusColor = '#28a745'
                } else if (env.BUILD_STATUS == 'UNSTABLE') {
                    statusColor = '#ffc107' 
                } else {
                    statusColor = '#dc3545'
                }

                def emailTemplate = readFile(file: env.EMAIL_TEMPLATE_PATH)

                def emailBody = emailTemplate
                    .replace('${STATUS_COLOR}', statusColor)
                    .replace('${BUILD_STATUS}', env.BUILD_STATUS ?: 'UNKNOWN')
                    .replace('${JOB_NAME}', env.JOB_NAME ?: 'UNKNOWN')
                    .replace('${BUILD_NUMBER}', env.BUILD_NUMBER ?: '0')
                    .replace('${BUILD_DURATION}', currentBuild.durationString ?: '0s')
                    .replace('${NEXUS_URL}', env.NEXUS_URL ?: 'N/A')
                    .replace('${NEXUS_REPOSITORY}', env.NEXUS_REPOSITORY ?: 'N/A')
                    .replace('${PYTHON_PACKAGE_VERSION}', env.PYTHON_PACKAGE_VERSION ?: 'N/A')
                    .replace('${BUILD_URL}', env.BUILD_URL ?: 'N/A')
                    .replace('${AWS_REGION}', env.AWS_REGION ?: 'N/A')
                    .replace('${ECS_CLUSTER}', env.ECS_CLUSTER ?: 'N/A')
                    .replace('${AWS_DEPLOYMENT_STATUS}', awsDeploymentStatus)
                    .replace('${APP_URL}', appUrl ?: 'Not available')
                    .replace('${CURRENT_YEAR}', new Date().format("yyyy"))

                emailext (
                    subject: "Build ${env.BUILD_STATUS}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS,
                    mimeType: 'text/html'
                )
            }
            cleanWs()
        }
        
        success {
            script {
                echo "Build completed successfully!"
                def awsStatus = sh(script: 'cat /tmp/aws_credentials_available 2>/dev/null || echo "false"', returnStdout: true).trim()
                if (awsStatus == 'true') {
                    echo "- AWS ECR: ${env.AWS_ECR_REGISTRY}"
                    echo "- AWS ECS: ${env.ECS_CLUSTER}/${env.ECS_SERVICE}"
                    echo "- AWS RDS: ${env.DB_INSTANCE_IDENTIFIER}"
                    
                    try {
                        def appUrl = "Not available"
                        if (fileExists("${WORKSPACE}/app_url.txt")) {
                            appUrl = readFile(file: "${WORKSPACE}/app_url.txt").trim()
                        }
                        echo "-  Application URL: ${appUrl}"
                        if (!appUrl.contains("not available")) {
                            echo "-  Health Check: ${appUrl}/health"
                        }
                    } catch (Exception e) {
                        echo "-  Application URL: Not available (check ECS service)"
                    }
                }
            }
        }
        
        failure {
            echo "Build failed! Check logs for details."
        }
        
        unstable {
            echo "Build unstable! Some tests may have failed."
        }
    }
}